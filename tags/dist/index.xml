<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dist on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/dist/</link>
    <description>Recent content in Dist on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Fri, 12 Oct 2018 14:23:18 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/tags/dist/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>熔断</title>
      <link>http://zjykzk.github.io/post/cs/dist/circuit-breaker/</link>
      <pubDate>Fri, 12 Oct 2018 14:23:18 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/dist/circuit-breaker/</guid>
      <description>

&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;

&lt;p&gt;在分布式系统中，会有很多的RPC调用，当某个服务超载时候，继续接收请求只会让系统变得不可用，甚至会导致多个系统的连锁反应。因此在这样的情况下，最好是把后续的请求挡住，直接返回错误。等到系统恢复正常以后再处理请求。熔断借鉴了电闸中的保险丝功能，当因为某个意外原因（比如插座进水导致短路）导致线路中的电流过大而产生大量热量，保险丝就会被融化掉，从而中断线路中的电流，防止事故发生。&lt;/p&gt;

&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;

&lt;p&gt;通俗来说，它是一个服务代理（逻辑上说），监测服务的状态，决定是否处理当前的请求，如果不处理返回错误。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;服务状态一般是通过记录请求失败的情况来表示，比如说服务因为文件句柄占用过多导致一致无法建立连接，从而请求失败，熔断器认为当前服务状态存在不可用情况。&lt;/p&gt;

&lt;p&gt;熔断器包含三个状态：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭（Closed）状态：在这个状态下，请求都会被转发给后端服务。同时会记录请求失败的次数，当请求失败次数在一段时间超过一定次数就会进入&lt;strong&gt;打开&lt;/strong&gt;状态。另外，失败次数会在特定时间间隔内重置。最后，除了基于一段时间内失败次数这个条件以外还可以使用连续失败次数。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打开（Open）状态：在这个状态下，熔断器会直接拒绝请求，返回错误，而不去调用后端服务。同时，会有一个定时器，时间到的时候会变成&lt;strong&gt;半打开&lt;/strong&gt;状态。目的假设服务会在一段时间内恢复正常。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;半打开（Half Open）状态：在这个状态下，熔断器会尝试把部分请求转发给后端服务，目的是为了探测后端服务是否恢复。当请求失败的情况下会进入&lt;strong&gt;打开&lt;/strong&gt;状态，成功情况下会进入&lt;strong&gt;关闭&lt;/strong&gt;状态，同时重置计数。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/circuit-breaker.png&#34; alt=&#34;circuit breaker&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;设计重点&#34;&gt;设计重点&lt;/h2&gt;

&lt;p&gt;在设计过程中需要考虑以下几个点。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;错误类型。后端服务会因为不同的问题返回不同的错误信息。针对不同的错误信息，熔断器可以采取不同的策略。比如说，针对限流错误，可以采用重试，如果连接拒绝大概率是服务宕机了，这中情况直接返回错误就可以了。另外，根据不同的错误类型可以使用不同的熔断条件，比如超时的threshold为10， 而连接拒绝的threshold值为3。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;日志监控。熔断器记录状态变化以及失败的请求应该被记录下来。这些信息反应的服务质量。方便管理员进一步处理。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;测试服务可用。在&lt;strong&gt;半打开&lt;/strong&gt;状态下，可以通过定制的接口探测后端服务是否恢复，而不是用用户的请求来探测。可以提高服务的质量。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;返回错误。返回给用户的错误，区分后端服务返回的错误和熔断器产生的错误。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;手工重置。因为有时候后端服务恢复时间的不确定性，导致熔断器判断失误。提供手工重置，可以方便熔断器的状态切换。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并发问题。熔断器需要做计数，多个请求之间存在数据竞争。需要避免熔断器自己的开销影响请求的响应时间。可以采用无锁计数实现。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;资源区分。有时候，资源是分布在不同的服务器上，是独立。最好，熔断器对请求也做资源区分，针对在不同资源请求做熔断，不然一个资源有问题会影响其他资源的访问。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重试错误的请求。有时候，错误和请求的参数有关系。把这部分请求记录下来，可以准备探测后端服务是否恢复。但是要做好重复请求的处理，比如幂等。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;

&lt;p&gt;Netflix中的&lt;a href=&#34;https://github.com/Netflix/Hystrix/wiki/How-it-Works#CircuitBreaker&#34;&gt;Hystrix&lt;/a&gt;有一个完整的实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/hystrix-circuit-breaker-1280.png&#34; alt=&#34;hystrix circuit breaker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;流程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;allowRequest()&lt;/code&gt;通过函数&lt;code&gt;isOpen()&lt;/code&gt;判断是否处理请求。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isOpen()&lt;/code&gt;判断逻辑：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;如果熔断器处在打开状态，并且定时没到，返回&lt;code&gt;false&lt;/code&gt;，请求处理完毕，否则进入半打开状态并返回&lt;code&gt;true&lt;/code&gt;，走下一步。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果最近一秒内失败率超过了某个百分比，返回&lt;code&gt;false&lt;/code&gt;，请求处理完毕，否则返回&lt;code&gt;true&lt;/code&gt;，走下一步。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;返回&lt;code&gt;true&lt;/code&gt;，走下一步。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markSuccess(duration)&lt;/code&gt;，表示请求处理成功，更新处理成功次数和处理时间，同时如果熔断器处于打开状态，那么需要重置计数，并把状态变成关闭状态。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markFailure(duration)&lt;/code&gt;，表示请求处理失败，更新处理失败次数。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hystrix维护了10个时间间隔为1秒的桶，用于记录请求处理结果成功、失败、超时、拒绝的数量。每过1秒就会创建一个新的桶，如果桶的数量超过10个，最旧的那个会被删除掉。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>限流</title>
      <link>http://zjykzk.github.io/post/cs/dist/rate-limit/</link>
      <pubDate>Thu, 30 Aug 2018 16:48:26 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/dist/rate-limit/</guid>
      <description>

&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;

&lt;p&gt;为了保证API的可用性，以及系统的可靠性，需要为API限速。不然，API请求量大到系统无法处理时就会出现系统变慢，甚至宕机的情况。常见的限速场景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;挡住某个用户的过多请求（用户激增或者恶意请求），确保正常处理其他用户请求。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;挡住过多的低优先级的请求，确保核心请求得到处理。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;由于系统内部错误，导致系统处理能力下降，调节系统的处理能力。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;挡住过多某类请求，确保其他请求可以得到处理。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;限速类型&#34;&gt;限速类型&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;请求限速&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;限制API在一秒中内能够处理的请求数量。如果超过这个数量，等待或者拒绝服务。通常情况下这个是首选。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;并发限制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对资源敏感的请求，比如CPU密集型API，进行并发限制，限制某一时刻最多只有有限个请求正在被处理。防止因为这些请求占用资源，导致其他请求得不到处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基于资源利用率限速&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对不同的请求分配了不同百分比的资源，当某一类请求超载时，对这类请求限速。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基于worker限速&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个是基于代码特征的限速。每类API通过不同的worker线程负责处理，当worker线程中出现请求堆积时进行限速。&lt;/p&gt;

&lt;h2 id=&#34;限速结果&#34;&gt;限速结果&lt;/h2&gt;

&lt;p&gt;http服务的话按照场景返回429或者503。&lt;/p&gt;

&lt;h2 id=&#34;常用算法&#34;&gt;常用算法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;计数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;单位时间内计数，超过这个数量时，拒绝服务，每个单位时间开始后计数清零。缺点是在时间边界处，会超过上限。比如，每秒限速100，在0.9s的时候来了100个请求全部得到处理，在下一秒0.1s来了100个请求。在0.9s到1.1s这个范围小于1s，但是请求达到了200。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 0.1s 0.2s 0.3s 0.4s 0.5s 0.6s 0.7s 0.8s 0.9s 0.1s 0.2s
+----+----+----+----+----+----+----+----+----+----+----+---
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 100| 100| 0  | 0 
+----+----+----+----+----+----+----+----+----+----+----+---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;队列&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;请求过来的时候，先如队列，处理逻辑处理队列中的请求。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基于大小的队列：当队列大小超过一个阀值的时候，拒绝新来的请求。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;基于时间的队列：请求在队列里面的时间超过多长时间没有被处理，立即返回。RocketMQ就是采用这种方式。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优先级队列：对请求做优先级分类，不同优先级的请求进入不同的队列。为了避免低优先级请求被饿死，需要对不同优先级队列分配不同的处理时间。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Leaky_bucket&#34;&gt;漏桶&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/leaky-bucket.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有一个容量固定的桶，桶中的请求以恒定的速率被处理。请求过来的时候，尝试进入桶，当桶满时被丢弃。本质上是队列后面加一个速率限制器。&lt;/p&gt;

&lt;p&gt;漏桶还有一个变形，在漏桶前面加一个队列。当桶满的时候，先放入队列，这样可以保留一部分请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Token_bucket&#34;&gt;令牌桶&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/token-bucket.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以恒定的速率向桶中加入token，当请求过来的时候从桶中获取token。如果桶空了，请求等待或者丢弃。相比漏桶令牌桶还可以做蓄水，当桶满的时候可以预留一部分token，可以做到突发(burst)的请求。&lt;/p&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;

&lt;p&gt;Guava中的&lt;a href=&#34;https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java#L131&#34;&gt;RateLimter&lt;/a&gt;是一个平滑的基于令牌桶的实现，同时还实现了warm up特点的一个&lt;a href=&#34;https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java#L161&#34;&gt;Ratelimiter&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>分布式ID生成算法</title>
      <link>http://zjykzk.github.io/post/cs/dist/uuid/</link>
      <pubDate>Wed, 22 Aug 2018 11:08:28 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/dist/uuid/</guid>
      <description>

&lt;p&gt;分布式Unique ID在分布式系统使用很广泛，常用的用途有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;请求的ID，用于跟踪请求链路。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;消息队列中的unique id。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;业务对象的id。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总结下生成分布式ID常用算法。&lt;/p&gt;

&lt;h2 id=&#34;数据库自增id&#34;&gt;数据库自增id&lt;/h2&gt;

&lt;p&gt;通过MySQL中的&lt;code&gt;auto_increment&lt;/code&gt;特性来实现数据库唯一的ID。问题是扩展性差，性能受限于一台机器。可以做的优化是使用多个数据库实例，设置相同的步长和不同的起始值，避免重复产生ID。通过一个这种方式可以利用多台机器的资源。同时，还有一个优化是获取ID的时候可以批量获取ID，这样可以减少DB的操作，减少响应时间。&lt;/p&gt;

&lt;p&gt;基于Redis，Postgres，Oracle也有类似的方案。&lt;/p&gt;

&lt;h2 id=&#34;uuid-http-www-ietf-org-rfc-rfc4122-txt&#34;&gt;&lt;a href=&#34;http://www.ietf.org/rfc/rfc4122.txt&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;UUID由&lt;code&gt;[0-9a-f-]&lt;/code&gt;字符组成，总共16个字节，转换成16进制的格式为：&lt;code&gt;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;数据由5个部分组成：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;时间戳，占60位。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;时钟序列，占13位。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;结点编号，占48位。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;版本号，版本不同以上1-3个字段的数据来源也不一样，占4位。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;UUID类型，用于解析UUID数据中的意义，占3位。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每个数据的位置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          time_low                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       time_mid                |         time_hi_and_version   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         node (2-5)                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;time_hi_and_version&lt;/code&gt;的第4-7位是版本号，&lt;code&gt;clk_seq_hi_res&lt;/code&gt;的第5-7位是UUID类型编号。&lt;/p&gt;

&lt;p&gt;UUID类型常用的有是&lt;strong&gt;IETF&lt;/strong&gt;和微软兼容的类型，UUID类型编号分别是&lt;code&gt;10x&lt;/code&gt;和&lt;code&gt;110&lt;/code&gt;，x是任意值。以下讨论的是IETF。&lt;/p&gt;

&lt;p&gt;UUID总共有5个版本，每个版本数据源和算法各有差异。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;时间戳&lt;/th&gt;
&lt;th&gt;时钟序列&lt;/th&gt;
&lt;th&gt;结点编号&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;自1582年10月15号，100纳秒数&lt;/td&gt;
&lt;td&gt;随机数。&lt;br /&gt;如果时间戳回退，这个值需要在上一个序列上面递增&lt;/td&gt;
&lt;td&gt;mac地址&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;自1582年10月15号，100纳秒数，同时会把低4个字节替换成GID或者UID（根据domain值）&lt;/td&gt;
&lt;td&gt;随机数。但是最低位会被替换成domain&lt;/td&gt;
&lt;td&gt;mac地址&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;给定命名空间和字符串通过MD5计算散列值&lt;/td&gt;
&lt;td&gt;散列值&lt;/td&gt;
&lt;td&gt;散列值&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;随机数&lt;/td&gt;
&lt;td&gt;随机数&lt;/td&gt;
&lt;td&gt;随机数&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;给定命名空间和字符串通过SHA-1计算散列值&lt;/td&gt;
&lt;td&gt;散列值&lt;/td&gt;
&lt;td&gt;散列值&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最常用的还是版本1和4。显然，两个版本都无法保证绝对唯一。版本1在100纳秒里面就会重复，而版本4就是概率问题了。&lt;/p&gt;

&lt;h2 id=&#34;mongodb的objectid&#34;&gt;mongodb的ObjectID&lt;/h2&gt;

&lt;p&gt;ObjectID是UUID版本1的变种。总共12个字节。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;4个字节时间戳，unix时间，秒。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3个字节机器标识。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2个字节进程id。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3个字节计数，起始值是一个随机数，过秒不归零。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每秒能支持2^24-1个不同的id，千万级别。&lt;/p&gt;

&lt;h2 id=&#34;twitter-snowflake派号器&#34;&gt;twitter snowflake派号器&lt;/h2&gt;

&lt;p&gt;snowflake占8个字节。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1个bit保留。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;41个bit的时间戳，unix时间，毫秒。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10个bit机器标识，5 bit是data center标识，5 bit是work标识。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12个bit的序号，过毫秒归零，保证id的递增。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;没毫秒支持2^12=4096个不同的id。&lt;/p&gt;

&lt;h2 id=&#34;uid要求&#34;&gt;UID要求&lt;/h2&gt;

&lt;p&gt;文章&lt;a href=&#34;http://ericliang.info/what-kind-of-id-generator-we-need-in-business-systems/&#34;&gt;《业务系统需要什么样的ID生成器》&lt;/a&gt;的提法很好： 唯一性，时间相关，粗略有序，可反解，可制造。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://calvin1978.blogcn.com/articles/uuid.html&#34;&gt;《服务化框架－分布式Unique ID的生成方法一览》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://chuansong.me/n/2459549%E2%80%9D&#34;&gt;《细聊分布式ID生成方法》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;amp;mid=2659598286&amp;amp;idx=1&amp;amp;sn=3172172ccea316b0ed83429ae718b54d&amp;amp;chksm=8be9eadcbc9e63caa10d708274b4fa34ceffa416ef4527e10e6b7a1a2d2f32cf8592d65bf728&#34;&gt;《生成全局唯一ID的3个思路，来自一个资深架构师的总结》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一致性hash算法</title>
      <link>http://zjykzk.github.io/post/cs/dist/cons-hash/</link>
      <pubDate>Sat, 28 Apr 2018 13:58:46 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/dist/cons-hash/</guid>
      <description>

&lt;h2 id=&#34;一致性hash&#34;&gt;一致性hash&lt;/h2&gt;

&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;

&lt;p&gt;缓存的机器扩容、缩容时，尽量保持数据的命中率。常规的hash算法，&lt;code&gt;hash(key)mod N&lt;/code&gt; （N表示缓存结点），当N变化时同一个key查询的缓存结点都会变化，导致缓存没有命中，造成很大的数据库压力。&lt;/p&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;p&gt;hash函数值大小32位，因此输出的范围是&lt;code&gt;0~2^32-1&lt;/code&gt;。把这个范围形成一个环，同时对数据进行hash计算以外，对缓存的机器也做hash计算。这些计算出来的值在这个环上都有对应的一个点。&lt;/p&gt;

&lt;p&gt;假设数据的hash值分别为&lt;code&gt;K1&lt;/code&gt;,&lt;code&gt;K2&lt;/code&gt;,&lt;code&gt;K3&lt;/code&gt;,&lt;code&gt;K4&lt;/code&gt;,&lt;code&gt;K5&lt;/code&gt;,&lt;code&gt;K6&lt;/code&gt;，以及缓存结点的hash值&lt;code&gt;H1&lt;/code&gt;,&lt;code&gt;H2&lt;/code&gt;,&lt;code&gt;H3&lt;/code&gt;,大小关系为&lt;code&gt;H1&amp;lt;K3&amp;lt;K4&amp;lt;K5&amp;lt;H2&amp;lt;K6&amp;lt;H3&amp;lt;K1&amp;lt;K2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;每个数据所在的缓存结点是在这个环上顺时针方向遇到的第一个缓存结点既是。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/dist/ch1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因此&lt;code&gt;K1&lt;/code&gt;,&lt;code&gt;K2&lt;/code&gt;落在&lt;code&gt;H1&lt;/code&gt;,&lt;code&gt;K3&lt;/code&gt;,&lt;code&gt;K4&lt;/code&gt;,&lt;code&gt;K5&lt;/code&gt;落在&lt;code&gt;H2&lt;/code&gt;,&lt;code&gt;K6&lt;/code&gt;落在&lt;code&gt;H3&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;添加一个新的缓存结点&lt;code&gt;H4&lt;/code&gt;，它的hash值落在&lt;code&gt;K4&lt;/code&gt;和&lt;code&gt;K5&lt;/code&gt;之间。按照规则，&lt;code&gt;K3&lt;/code&gt;,&lt;code&gt;K4&lt;/code&gt;将落在&lt;code&gt;H4&lt;/code&gt;，也就是说&lt;code&gt;K3&lt;/code&gt;,&lt;code&gt;K4&lt;/code&gt;将会失效而其他的数据不会影响。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/dist/ch2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;减少缓存结点&lt;code&gt;H3&lt;/code&gt;，&lt;code&gt;K6&lt;/code&gt;会受到影响，它将落在缓存结点&lt;code&gt;H1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/dist/ch3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在次基础上可以抽象出一层缓存的虚拟缓存结点，这样的好处是可以事先确定缓存结点数量，让数据均匀的分布在每个虚拟缓存结点上面。每个物理缓存结点对应一个或者多个缓存结点。如下图中，有个4个虚拟缓存结点&lt;code&gt;VH1/VH2/VH3/VH4&lt;/code&gt;，两个物理缓存结点&lt;code&gt;H1/H2&lt;/code&gt;，分别对应&lt;code&gt;VH1/VH2和VH3/VH4&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/dist/ch4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
