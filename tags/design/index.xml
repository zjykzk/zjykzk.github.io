<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/design/</link>
    <description>Recent content in Design on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Thu, 11 Oct 2018 15:33:32 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>guava中RateLimiter的设计</title>
      <link>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</link>
      <pubDate>Thu, 11 Oct 2018 15:33:32 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</guid>
      <description>

&lt;p&gt;guava中的&lt;a href=&#34;https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java#L131&#34;&gt;RateLimiter&lt;/a&gt;实现了比较有意思的功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;平滑。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;记录未使用的信息。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存下次请求被满足的时间。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;平滑&#34;&gt;平滑&lt;/h2&gt;

&lt;p&gt;通过令牌桶算法实现。&lt;/p&gt;

&lt;h2 id=&#34;记录未使用信息&#34;&gt;记录未使用信息&lt;/h2&gt;

&lt;p&gt;实现中通过&lt;code&gt;storedPermits&lt;/code&gt;表示有多长时间没有被使用了。这个信息可以处理资源的两种情况：&lt;br /&gt;
1. 资源充足。这个实现是Burst模式。&lt;br /&gt;
2. 资源超载。比如说缓存过期，导致请求处理变慢。这个实现是Warmup模式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;storedPermits&lt;/code&gt;的计算公式：&lt;code&gt;min(maxPermits, timeNotUsedMicros/coolDownIntervalMicros())&lt;/code&gt;，其中&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;和&lt;code&gt;maxPermits&lt;/code&gt;在不同模式下面计算方式不同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当RateLimiter发现资源没有没使用一段时间以后，任务现在资源的十分充分的，当请求过来的时候直接可以满足。&lt;code&gt;storedPermits&lt;/code&gt;代表的就是当前充足资源的数量。&lt;/p&gt;

&lt;p&gt;另外，&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;返回&lt;code&gt;stableIntervalMicros&lt;/code&gt;，&lt;code&gt;maxPermits&lt;/code&gt;等于&lt;code&gt;permitsPerSecond&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warmup模式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          ^ throttling
          |
    cold  +                  /
 interval |                 /.
          |                / .
          |               /  .   ← &amp;quot;warmup period&amp;quot; is the area of the trapezoid between
          |              /   .     thresholdPermits and maxPermits
          |             /    .
          |            /     .
          |           /      .
   stable +----------/  WARM .
 interval |          .   UP  .
          |          . PERIOD.
          |          .       .
        0 +----------+-------+--------------→ storedPermits
          0 thresholdPermits maxPermits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图是warmup模式消耗&lt;code&gt;storedPermits&lt;/code&gt;所需要时间的建模。&lt;br /&gt;
1. RateLimiter的状态是一条垂直线，包含两个信息：当前的&lt;code&gt;storedPermits&lt;/code&gt;和被消耗时需要的时间。&lt;br /&gt;
2. 当RateLimiter没有被使用时，&lt;code&gt;storedPermits&lt;/code&gt;向&lt;code&gt;maxPermits&lt;/code&gt;增加，增速是&lt;code&gt;warmupPeriodMicro/maxPermits&lt;/code&gt;。&lt;br /&gt;
3. 当RateLimiter被使用时，&lt;code&gt;storedPermits&lt;/code&gt;向0减少，需要的时间是这个函数的积分。&lt;/p&gt;

&lt;p&gt;注意：&lt;br /&gt;
1. 这里&lt;code&gt;thresholdPermits&lt;/code&gt;是任意值，源代码中假设&lt;code&gt;storedPermits&lt;/code&gt;从&lt;code&gt;thresholdPermits&lt;/code&gt;减少到0需要的时间为&lt;code&gt;warmupPeriod/2&lt;/code&gt;。因此，&lt;code&gt;thresholdPermits=0.5*warmupPeriod/stableInterval&lt;/code&gt;。&lt;br /&gt;
2. 另外，&lt;code&gt;storedPermits&lt;/code&gt;从&lt;code&gt;maxPermits&lt;/code&gt;减少到&lt;code&gt;thresholdPermits&lt;/code&gt;需要的时间为&lt;code&gt;warmupPeriod&lt;/code&gt;，因此&lt;code&gt;maxPermits=thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当RateLimiter发现资源没有没使用一段时间以后，请求再来的时候，资源需要一个预热，这个过程中请求处理会比预热完以后有一个变化。这个变化的效果可以是快也可以是慢，这个是根据&lt;code&gt;coldFactor&lt;/code&gt;来定义。当这个值分三种情况：&lt;br /&gt;
1. 等于1，相当于没有预热效果。&lt;br /&gt;
2. 小于1，表示在没有使用这段时间里面，资源会有一部分的囤积，可以较快处理请求。&lt;br /&gt;
3. 大于1，表示在没有使用这段时间里面，资源被回收，需要重新申请来处理请求，所以会比较慢。&lt;/p&gt;

&lt;p&gt;另外，&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;返回&lt;code&gt;warmupPeriodMicro/maxPermits&lt;/code&gt;。这是一个任意值，没有理论依据。&lt;/p&gt;

&lt;h2 id=&#34;保存下次请求被满足的时间&#34;&gt;保存下次请求被满足的时间&lt;/h2&gt;

&lt;p&gt;这样做的好处是，可以比较方便判断在一段时间内，多个资源是否被满足的逻辑。permit的使用来源于两个地方：一段时间未使用而累积的&lt;code&gt;storedPermits&lt;/code&gt;，以及一段时间以后才能满足的，假设用&lt;code&gt;freshPermits&lt;/code&gt;表示。在不同模式下面消耗&lt;code&gt;storedPermits&lt;/code&gt;和&lt;code&gt;freshPermits&lt;/code&gt;需要的时间是不一样的。总的公式：&lt;code&gt;freshPermits * stableIntervalMicros + storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;，其中&lt;code&gt;storedPermitsToWaitTime(...)&lt;/code&gt;在不同模式下面，实现方式不一样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这个模式下面，&lt;code&gt;storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;返回值是0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warmup模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;返回的是建模函数在&lt;code&gt;storedPermits,permitsToTake&lt;/code&gt;之间的积分（图像面积）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>接口在哪里定义？</title>
      <link>http://zjykzk.github.io/post/cs/design/interface-owner/</link>
      <pubDate>Sun, 15 Jul 2018 15:11:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/interface-owner/</guid>
      <description>&lt;p&gt;接口放在哪里决定了源代码依赖问题。因此，依赖是接口定义唯一考量，其他问题都可以归结为依赖问题，而定义的包永远是被依赖包。&lt;/p&gt;

&lt;p&gt;接口定义的位置有三种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用者&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现者&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;单独一个第三方位置&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;放在使用者这边&lt;/strong&gt;，那么实现者依赖使用者的接口定义。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：可以并行开发，尤其是类似golang这样的语言，实现一接口不需要引用具体的接口定义，即使在必须引用的开发语言里面也只需要实现相关的接口，集成的时候加上是很简单的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：在实现者依赖接口定义源代码的情况下，实现者代码要提出来重用，必须要得要包含使用者的接口定义&lt;/p&gt;

&lt;p&gt;这样的方式比较适合多个使用者，单个实现者的情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;放在实现者这边&lt;/strong&gt;，那么使用者依赖实现者的接口定义。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：实现者是一个独立的包，可以很方便的重用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：使用者开发的时候需要引用实现者的接口定义，增加并行开发的难度，这里可以自己mock接口，集成的时候改成实现者的接口即可。&lt;/p&gt;

&lt;p&gt;这样的方式适合单个使用者，多个实现者情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;单独放在第三方位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：定义完接口以后，使用者和实现者都可以并行开发，同时实现者包的重用和使用者解耦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：包的管理变得复杂，包含接口的包会变得很薄&lt;/p&gt;

&lt;p&gt;这样的方式适合多个使用者，多个实现者情况。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常用面向对象设计原则</title>
      <link>http://zjykzk.github.io/post/cs/design/soild/</link>
      <pubDate>Wed, 04 Jul 2018 22:28:20 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/soild/</guid>
      <description>

&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;

&lt;p&gt;软件的复杂来源于需求的易变，意味着软件本身容易修改。好设计的目的就是提供软件的可修改能力，也就是可维护性、扩展性。SOILD原则就是在设计过程中达到这个目标的一些原则。&lt;/p&gt;

&lt;h2 id=&#34;单一职责原则&#34;&gt;单一职责原则&lt;/h2&gt;

&lt;p&gt;又名SRP（Single Responsibility Principle）。针对一个函数、类、组件、架构的修改有且只有一个理由，而理由的来自于使用者。&lt;/p&gt;

&lt;p&gt;这样的好处是把拥有相同修改理由的函数、类、组件组织在一起，不同的分开，达到修改的时候不会影响其他代码，增强了可维护性。&lt;/p&gt;

&lt;p&gt;这是一个定义简单，实操不容易正确的原则。原因在于：&lt;br /&gt;
1. &lt;strong&gt;职责&lt;/strong&gt;无法度量。&lt;br /&gt;
2. 因为团队、项目背景等待原因，在具体实现的细节中很难做到SRP。&lt;/p&gt;

&lt;p&gt;因此，在设计的时候接口一定做到SRP，实现尽量SRP。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;组件层面的SRP，叫做Component common closure，架构层面的SRP叫做axis of change responsibility for creation of architecture boundary。&lt;/p&gt;

&lt;h2 id=&#34;开闭原则&#34;&gt;开闭原则&lt;/h2&gt;

&lt;p&gt;又名OCP（Open-Close Principle）。对扩展开发，对修改关闭。&lt;/p&gt;

&lt;p&gt;通过这样的方式达到添加一个功能时，尽可能少的修改现有源代码、模块、二进制文件，尽可能的通过添加代码来实现。这样减少原来的功能被破坏的概率，达到软件的可维护性、可扩展性、可复用性。因此，它是其他面向对象设计原则的核心。&lt;/p&gt;

&lt;p&gt;遵守OCP原则的手段是&lt;strong&gt;抽象&lt;/strong&gt;。一个功能的抽象，更依赖于使用者，而非实现者。只有使用者才明白需要抽象什么内容。抽象的难点是找到易变的部分，一个指导原则是“快速失败，下不为例”，有以下几条参考实践：&lt;br /&gt;
1. TDD，先写测试代码。&lt;br /&gt;
2. 更短的开发周期。&lt;br /&gt;
3. 先开发特性，后开发基础设施代码，并经常给使用者review。&lt;br /&gt;
4. 先开发重要功能。&lt;br /&gt;
5. 经常并尽早发布，尽可能让用户和使用者使用。&lt;/p&gt;

&lt;p&gt;抽象的对象一般是类、模块以及组件。几个比较的好的实践：&lt;br /&gt;
1. 在函数参数、类抽象中提供稳定的接口定义。&lt;br /&gt;
2. 通过元数据抽象逻辑，比如通过配置的形式表达逻辑。&lt;br /&gt;
3. 定义项目章程，建立团队文化，沉淀优秀的习惯，提高开发效率。&lt;br /&gt;
4. 在架构层面，分析功能变化的来源、时机以及原因，把功能划分为不同的组件，底层组件依赖高层组件，高层组件不会受到底层组件变化的影响，同时避免循环依赖。&lt;br /&gt;
5. 抽象的时候需要避免过度抽象，带来不必要的复杂度。&lt;/p&gt;

&lt;h2 id=&#34;里氏替换原则&#34;&gt;里氏替换原则&lt;/h2&gt;

&lt;p&gt;又名LSP（Liskov Substitutiion Principle）。基类能够被子类代替，并且保证程序行为不变。&lt;/p&gt;

&lt;p&gt;OCP的实现需要使用抽象和多态，静态语言中继承是多态的一个重要实现方式。LSP就是解决继承带来的一些问题，比如侵入性、耦合性、缺乏灵活性。遵守LSP能够更加容易遵守OCP，因为子类可以替换基类，达到不修改原来代码，通过扩展的方式，添加逻辑。提高程序的健壮性，版本升级的兼容性。&lt;/p&gt;

&lt;p&gt;继承中常说的IS-A，强调的是方法的行为，子类中的方法行为要和基类中的一致，而不是性质一致。这个行为需要从设计的使用者角度来判断模块。模块逻辑的一致性，说的就是这个行为需要一致。所以，IS-A语义是子类替换时，保证程序行为一致。&lt;/p&gt;

&lt;p&gt;虽然这里LSP强调代码中的继承，其实LSP也适用于其他约定的服务、组件，这些内容修改、替换以后都不应该影响原来程序的行为。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 当子类中override的方法工作比较少时，可能违反LSP。&lt;br /&gt;
2. 采用DBC（design by contract）编程方法。约定方法的前置条件和后置条件，在LSP下，子类中的前置条件只能比基类的弱，而子类中的后置条件只能比基类的强。因为，如果子类中的前置条件强，那么替换以后原来基类的前置条件下的输入就没法满足了，同样如果子类的后置条件弱，那么方法的输出在一些情况下程序行为就会和原来的不一样。&lt;/p&gt;

&lt;h2 id=&#34;依赖反转原则&#34;&gt;依赖反转原则&lt;/h2&gt;

&lt;p&gt;又名DIP（Dependence Inversion Principle）。高层不依赖底层，依赖抽象，底层也只依赖抽象；抽象不依赖细节，细节依赖抽象。&lt;/p&gt;

&lt;p&gt;反转（inversion）包含两层含义：&lt;br /&gt;
1. 控制流和源代码依赖相反，a模块执行时会调用b模块函数，但是源代码层面来说b模块会依赖a模块。&lt;br /&gt;
2. 接口所有者，原先a模块使用b模块定义的接口，而现在接口放在了a模块中，从而从源代码层面来说b模块依赖a模块。&lt;/p&gt;

&lt;p&gt;为什么要依赖抽象？显然抽象比实现细节稳定。从编程语言角度上来说，接口变了实现不变，而实现变了，接口不一定变，显然接口更加稳定。因此，接口的稳定也十分重要。&lt;/p&gt;

&lt;p&gt;DIP能够减少类、模块之间的耦合，提供系统的稳定性，提高代码的复用性、可扩展性、可读性和可维护性。它是其他OO设计技巧的基础。&lt;/p&gt;

&lt;p&gt;建立依赖的方式：&lt;br /&gt;
1. 构造函数传递依赖对象。&lt;br /&gt;
2. setter方法传递对象。&lt;br /&gt;
3. 接口声明依赖对象，接口中的方法参数、返回值中引用其他接口。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 每个类尽量有接口或者抽象类。&lt;br /&gt;
2. 变量的表面类型尽量是接口、抽象类型或者是不易变的类。&lt;br /&gt;
3. 任何类不从易变的具体类派生。在维护代码的时候这个实践经常会被破坏。&lt;br /&gt;
4. 尽量不要override基类的方法。&lt;br /&gt;
5. 创建对象时考虑使用工厂模式。&lt;/p&gt;

&lt;h2 id=&#34;接口分离原则&#34;&gt;接口分离原则&lt;/h2&gt;

&lt;p&gt;又名ISP（Interface Segregation Principles）。使用者不应该依赖它不使用的方法。所以，分离的使用者意味着分离的接口。&lt;/p&gt;

&lt;p&gt;当你依赖的接口包含不需要的方法时，加上依赖的传递性，从源代码角度看当接口的改变，你的代码可能会跟着改变（这是因为对动态语言来说不用修改原来的代码），从架构角度看由于组件依赖，当组件修改时，会导致组件的重新编译、发布。ISP的目的还是减少类、模块间的耦合，提供类、模块的内聚性，提高代码的可扩展性、可复用性。&lt;/p&gt;

&lt;p&gt;有两类接口：&lt;br /&gt;
1. class interface，在类层面履行接口，每个实现细节实现具体的接口，在golang中就是&lt;code&gt;interface&lt;/code&gt;定义的接口。&lt;br /&gt;
2. object interface，在对象层面履行接口，每个新建的对象拥有类的方法，在golang中就是&lt;code&gt;struct&lt;/code&gt;定义的方法。&lt;/p&gt;

&lt;p&gt;SRP也强调职责分离，虽然它的效果也会有ISP的效果，但是它是从业务逻辑的角度去归类职责并进行分离。而ISP是从接口的角度去分离接口，它是在SIP的基础上进一步的细分。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 一个接口是只服务于一个模块或者业务逻辑。&lt;br /&gt;
2. 尽量减少公共的方法。&lt;br /&gt;
3. 保持接口的干净。如果有污染尽快修复。&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;软件开发首要原则就是管理复杂度。显然，软件中的每个组成（函数、类、模块、组件）之间越独立（耦合性越低），整个软件的复杂度越低，软件就越容易维护。所以，软件设计原则中最重要的就是降低各个组成部分的耦合度。而，最重要的手段就是抽象。OOD的原则做的都是使用抽象这个利器来降低组成部分的耦合。他们从不同的角度来实现这个目标：业务逻辑角度（SRP），接口的角度（ISP），特定语言角度（LSP），软件扩展角度（OCP），组件依赖关系角度（DIP）。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
