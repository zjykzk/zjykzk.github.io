<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/design/</link>
    <description>Recent content in design on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Thu, 11 Oct 2018 15:33:32 +0800</lastBuildDate>
    
	<atom:link href="http://zjykzk.github.io/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>guava中RateLimiter的设计</title>
      <link>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</link>
      <pubDate>Thu, 11 Oct 2018 15:33:32 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</guid>
      <description>guava中的RateLimiter实现了比较有意思的功能：
 平滑。
 记录未使用的信息。
 保存下次请求被满足的时间。
  平滑 通过令牌桶算法实现。
记录未使用信息 实现中通过storedPermits表示有多长时间没有被使用了。这个信息可以处理资源的两种情况：
1. 资源充足。这个实现是Burst模式。
2. 资源超载。比如说缓存过期，导致请求处理变慢。这个实现是Warmup模式。
storedPermits的计算公式：min(maxPermits, timeNotUsedMicros/coolDownIntervalMicros())，其中coolDownIntervalMicros()和maxPermits在不同模式下面计算方式不同。
Burst模式
当RateLimiter发现资源没有没使用一段时间以后，任务现在资源的十分充分的，当请求过来的时候直接可以满足。storedPermits代表的就是当前充足资源的数量。
另外，coolDownIntervalMicros()返回stableIntervalMicros，maxPermits等于permitsPerSecond。
Warmup模式
 ^ throttling | cold + / interval | /. | / . | / . ← &amp;quot;warmup period&amp;quot; is the area of the trapezoid between | / . thresholdPermits and maxPermits | / . | / . | / . stable +----------/ WARM . interval | .</description>
    </item>
    
    <item>
      <title>接口在哪里定义？</title>
      <link>http://zjykzk.github.io/post/cs/design/interface-owner/</link>
      <pubDate>Sun, 15 Jul 2018 15:11:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/interface-owner/</guid>
      <description>接口放在哪里决定了源代码依赖问题。因此，依赖是接口定义唯一考量，其他问题都可以归结为依赖问题，而定义的包永远是被依赖包。
接口定义的位置有三种情况：
 使用者
 实现者
 单独一个第三方位置
  放在使用者这边，那么实现者依赖使用者的接口定义。
好处：可以并行开发，尤其是类似golang这样的语言，实现一接口不需要引用具体的接口定义，即使在必须引用的开发语言里面也只需要实现相关的接口，集成的时候加上是很简单的。
坏处：在实现者依赖接口定义源代码的情况下，实现者代码要提出来重用，必须要得要包含使用者的接口定义
这样的方式比较适合多个使用者，单个实现者的情况。
放在实现者这边，那么使用者依赖实现者的接口定义。
好处：实现者是一个独立的包，可以很方便的重用。
坏处：使用者开发的时候需要引用实现者的接口定义，增加并行开发的难度，这里可以自己mock接口，集成的时候改成实现者的接口即可。
这样的方式适合单个使用者，多个实现者情况。
单独放在第三方位置
好处：定义完接口以后，使用者和实现者都可以并行开发，同时实现者包的重用和使用者解耦。
坏处：包的管理变得复杂，包含接口的包会变得很薄
这样的方式适合多个使用者，多个实现者情况。</description>
    </item>
    
    <item>
      <title>常用面向对象设计原则</title>
      <link>http://zjykzk.github.io/post/cs/design/soild/</link>
      <pubDate>Wed, 04 Jul 2018 22:28:20 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/soild/</guid>
      <description>设计 软件的复杂来源于需求的易变，意味着软件本身容易修改。好设计的目的就是提供软件的可修改能力，也就是可维护性、扩展性。SOILD原则就是在设计过程中达到这个目标的一些原则。
单一职责原则 又名SRP（Single Responsibility Principle）。针对一个函数、类、组件、架构的修改有且只有一个理由，而理由的来自于使用者。
这样的好处是把拥有相同修改理由的函数、类、组件组织在一起，不同的分开，达到修改的时候不会影响其他代码，增强了可维护性。
这是一个定义简单，实操不容易正确的原则。原因在于：
1. 职责无法度量。
2. 因为团队、项目背景等待原因，在具体实现的细节中很难做到SRP。
因此，在设计的时候接口一定做到SRP，实现尽量SRP。
注：
组件层面的SRP，叫做Component common closure，架构层面的SRP叫做axis of change responsibility for creation of architecture boundary。
开闭原则 又名OCP（Open-Close Principle）。对扩展开发，对修改关闭。
通过这样的方式达到添加一个功能时，尽可能少的修改现有源代码、模块、二进制文件，尽可能的通过添加代码来实现。这样减少原来的功能被破坏的概率，达到软件的可维护性、可扩展性、可复用性。因此，它是其他面向对象设计原则的核心。
遵守OCP原则的手段是抽象。一个功能的抽象，更依赖于使用者，而非实现者。只有使用者才明白需要抽象什么内容。抽象的难点是找到易变的部分，一个指导原则是“快速失败，下不为例”，有以下几条参考实践：
1. TDD，先写测试代码。
2. 更短的开发周期。
3. 先开发特性，后开发基础设施代码，并经常给使用者review。
4. 先开发重要功能。
5. 经常并尽早发布，尽可能让用户和使用者使用。
抽象的对象一般是类、模块以及组件。几个比较的好的实践：
1. 在函数参数、类抽象中提供稳定的接口定义。
2. 通过元数据抽象逻辑，比如通过配置的形式表达逻辑。
3. 定义项目章程，建立团队文化，沉淀优秀的习惯，提高开发效率。
4. 在架构层面，分析功能变化的来源、时机以及原因，把功能划分为不同的组件，底层组件依赖高层组件，高层组件不会受到底层组件变化的影响，同时避免循环依赖。
5. 抽象的时候需要避免过度抽象，带来不必要的复杂度。
里氏替换原则 又名LSP（Liskov Substitutiion Principle）。基类能够被子类代替，并且保证程序行为不变。
OCP的实现需要使用抽象和多态，静态语言中继承是多态的一个重要实现方式。LSP就是解决继承带来的一些问题，比如侵入性、耦合性、缺乏灵活性。遵守LSP能够更加容易遵守OCP，因为子类可以替换基类，达到不修改原来代码，通过扩展的方式，添加逻辑。提高程序的健壮性，版本升级的兼容性。
继承中常说的IS-A，强调的是方法的行为，子类中的方法行为要和基类中的一致，而不是性质一致。这个行为需要从设计的使用者角度来判断模块。模块逻辑的一致性，说的就是这个行为需要一致。所以，IS-A语义是子类替换时，保证程序行为一致。
虽然这里LSP强调代码中的继承，其实LSP也适用于其他约定的服务、组件，这些内容修改、替换以后都不应该影响原来程序的行为。
几个比较好的实践：
1. 当子类中override的方法工作比较少时，可能违反LSP。
2. 采用DBC（design by contract）编程方法。约定方法的前置条件和后置条件，在LSP下，子类中的前置条件只能比基类的弱，而子类中的后置条件只能比基类的强。因为，如果子类中的前置条件强，那么替换以后原来基类的前置条件下的输入就没法满足了，同样如果子类的后置条件弱，那么方法的输出在一些情况下程序行为就会和原来的不一样。
依赖反转原则 又名DIP（Dependence Inversion Principle）。高层不依赖底层，依赖抽象，底层也只依赖抽象；抽象不依赖细节，细节依赖抽象。</description>
    </item>
    
  </channel>
</rss>