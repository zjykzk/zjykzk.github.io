<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>os on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/os/</link>
    <description>Recent content in os on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Wed, 16 Dec 2020 16:58:31 +0800</lastBuildDate>
    
	<atom:link href="http://zjykzk.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>虚拟内存技术</title>
      <link>http://zjykzk.github.io/posts/cs/os/vm/</link>
      <pubDate>Wed, 16 Dec 2020 16:58:31 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/os/vm/</guid>
      <description>缘起 最开始，操作系统的内存管理非常简陋。只是简单把物理内存分为两部分：低地址部分，64K分给操作系统，高地址部分分给用户程序。而且每次只执行一个程序。执行完后要重新装载程序，再执行其他程序。接着，由于那是机器非常昂贵，人们希望能够充分利用机器资源。出现了多任务的操作系统。这时操作系统能够支持一次自动执行多个任务，在某些程序执行IO的时候，CPU能够执行其他程序，这样就提升了机器资源的利用率。后来，又有了希望能够和程序及时交互。这样就能方便知道程序执行的状态了，这个对程序员来说太重要了。不然，每次都要等程序执行完才能知道结果。于是有了分时的操作系统，也就是每个进程执行一小部分时间。但是，这里就出现了安全问题，一个进程随意的读写另外一个进程的数据，甚至是操作系统的数据！由此，内存的虚拟化就出现了，它为每个程序提供一个统一抽象的地址空间，程序看到的地址又叫虚拟地址。它的目标包括：
 透明。对程序透明，每个程序只需要认知地址空间就行，不需要考虑自己的数据、代码是放在物理内存的哪个位置。 高效。包括空间和时间两方面。 安全。进程隔离，保证不能任意访问其他进程的数据。  地址转换 简单来说，把进程的虚拟地址转换成物理地址。同时程序的每次内存访问都在操作系统的控制之下，确保安全。另外，通过硬件的支持保障性能以及地址转换对用户透明。它是内存虚拟化的核心机制，我们遇到的很多技术细节都是为了解决这个问题。
策略 动态重定位 这里包括软件实现的静态重定位(static relocation)和基于硬件的动态重定位(dynamic relocation)。
软件的实现通过一个叫loader的软件，把应用程序中的引用的地址都加上一个偏移地址就变成物理地址了。显然，这里最大的问题是不安全。
硬件就不一样了，它有两个寄存器一个基地址寄存器，一个地址范围限制寄存器。当访问一个内存的时候，先把地址加上基地址寄存器中的值，这个结果就是物理地址了。同时还会对比物理地址和地址范围寄存器比较，如果超过就触发异常。这个硬件一般叫做内存管理单元（MMU）。
因此，硬件需要提供以下几个功能：
 特权模式。因为硬件有MMU的操作指令，这些指令只有操作系统才能使用，用户程序是不能直接使用的。 基地址寄存器和地址范围寄存器。用于虚拟地址到物理地址的转换以及地址合法性的检查。 地址转换以及检查地址是否在范围内的能力。 更新基地址寄存器和地址范围寄存器指令。操作系统运行一个进程时，需要把进程的基地址和地址范围设置到到相应的寄存器。 提供特权指令注册异常处理程序。操作系统告诉硬件具体异常的处理程序地址。 触发异常的能力。非法访问内存地址时触发异常。  同时，操作系统需要提供以下几个功能：
 内存管理。为新进程分配内存，回收执行结束的进程使用的内存，通常是一个free list来管理。 基地址和地址范围管理。进程切换时设置当前执行的进程的基地址和地址范围到相应的寄存器。 异常处理能力。  操作系统和硬件的交互，主要包含在启动和执行程序的时候。
启动：
操作系统（kernel mode） 硬件 ================================+================================= 初始化异常表 保存系统调用地址 定时处理程序地址 非法内存访问处理程序地址 非法指令异常处理程序 启动定时器中断 开启定时器 初始化进程表 初始内存空闲列表 程序执行：
操作系统（kernel mode） 硬件 程序（user mode） ================================+=======================================+===================== 启动进程A： 进程表中添加进程 分配进程需要的内存 设置基地址和地址范围寄存器 执行进程A的代码 恢复进程A的寄存器，进入user mode 跳转到进程A的起始指令 获取指令 转换指令的物理地址，获取指令内容 执行指令 如果是保存或者获取数据，检查内存 地址是否合法 继续执行。。。 定时器时间到了，进入kernel mode 执行定时器处理程序 停止执行进程A，保存进程A的上 下文到进程控制块： 当前执行的指令地址以及基地址 寄存器和地址范围寄存器的值 加载进程B的寄存器以及指令地址 执行进程B的代码 恢复进程B的寄存器，进入user mode 跳转到进程B的指令 访问非法地址 地址越界，触发异常进入kernel mode 执行非法访问地址异常代码，终止 进程B，回收进程B的内存，释放 进程表中有关进程B的内存 分段 把整个地址空间映射到物理空间如下图（假设地址空间大小是16K）：</description>
    </item>
    
  </channel>
</rss>