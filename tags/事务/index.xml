<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>事务 on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 事务 on 老K随笔</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>(c) 2025 zenk.</copyright>
    <lastBuildDate>Fri, 17 Apr 2020 15:12:22 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/tags/%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二阶段提交和三阶段提交</title>
      <link>http://zjykzk.github.io/posts/cs/dist/2_3pc/</link>
      <pubDate>Fri, 17 Apr 2020 15:12:22 +0800</pubDate>
      <guid>http://zjykzk.github.io/posts/cs/dist/2_3pc/</guid>
      <description>&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;&#xA;&lt;p&gt;事务是一段访问或者更新数据的程序。它的特点是ACID。本地事务只涉及到一个数据库能够保证事务ACID了。当涉及到多个不同数据库（广义的数据库，他们可以是MQ，甚至缓存）操作时，为了保证每个数据库的操作要么都成功或者都失败，就需要额外的技术来处理。这是因为单个数据库操作会失败，同时&lt;strong&gt;通信失败&lt;/strong&gt;会导致整个事务无法感知这个失败。二阶段提交（2PC）或者三阶段提交（3PC）就是用来解决这个问题。&lt;/p&gt;&#xA;&lt;p&gt;一般来说这个有两个角色一个是事务协调者，简称&lt;strong&gt;TC&lt;/strong&gt;，一个是事务参，简称&lt;strong&gt;TP&lt;/strong&gt;。下文用简称来说明。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2pc&#34;&gt;2PC&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备完毕状态&#34;&gt;准备完毕状态&lt;/h3&gt;&#xA;&lt;p&gt;当TP把事务中修改的结果持久化到存储以后，它才能算是准备完毕。&lt;/p&gt;&#xA;&lt;p&gt;在所有的TP准备完毕之前，不能有任何一个TP提交事务。不然就会破坏事务的原子性。比如：TP1提交了，TP2还没准备完毕，这个时候TP2crash了，因为TP2并没有保存事务相关的after-images，就没法恢复。这时就出现了TP1成功，但是TP2没有执行的情况。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2PC本质：在提交之前确保所有的TP都已经准备完毕。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;协议&#34;&gt;协议&lt;/h3&gt;&#xA;&lt;p&gt;2pc包含两个阶段。准备阶段和提交（终止）阶段，TC和TP的通信如下。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                       TC                              TP&#xA;                     +----+  REQUEST-TO-PREPARE      +----+&#xA;                     |    | -----------------------&amp;gt; |    |&#xA;                     |    |         PREPARE          |    |&#xA;                     |    | &amp;lt;----------------------- |    |&#xA;                     |    |           NO             |    |&#xA;                     |    |                          |    |&#xA;                     |    |         COMMIT           |    |&#xA;                     |    | -----------------------&amp;gt; |    |&#xA;                     |    |          ABORT           |    |&#xA;                     |    |          DONE            |    |&#xA;                     |    | &amp;lt;----------------------- |    |&#xA;                     +----+                          +----+&#xA;                                    Messages&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2pc&lt;em&gt;本质是任何TP提交之前，所有的TP都必须已经准备好。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;TC向每个TP发送REQUEST-TO-PREPARE消息。&lt;/li&gt;&#xA;&lt;li&gt;TC等待每个TP的投票。&lt;/li&gt;&#xA;&lt;li&gt;TP收到REQUEST-TO-PREPARE返回消息：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;TP确认可以提交事务，返回PREPARE消息。&lt;/li&gt;&#xA;&lt;li&gt;TP准备资源失败，返回NO消息。&lt;/li&gt;&#xA;&lt;li&gt;因为系统负载原因或者系统挂掉了，一直没有投票&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
