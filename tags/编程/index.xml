<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 老K随笔</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>(c) 2025 zenk.</copyright>
    <lastBuildDate>Tue, 28 Mar 2017 11:22:09 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GO 内存模型</title>
      <link>http://zjykzk.github.io/posts/cs/golang/go-memory-model/</link>
      <pubDate>Tue, 28 Mar 2017 11:22:09 +0800</pubDate>
      <guid>http://zjykzk.github.io/posts/cs/golang/go-memory-model/</guid>
      <description>&lt;p&gt;内存模型定义了一系列的条件，在这些条件下，多个goroutine对一个变量进行读写，保证一个goroutine读取到的值是是另外一个goroutine写入的某个值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;happens-before&#34;&gt;Happens Before&lt;/h2&gt;&#xA;&lt;p&gt;编译器会对程序做优化，比如指令重排。在go语言中规定，在同一个goroutine里面，程序表达的顺序就是读写的顺序。但是，多个goroutine执行同样的代码时，就会出现读写顺序不一样的情况。例如，代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在编译器的优化下，代码的执行顺序有可能变成下面这样的情况：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，多个goroutine执行时，就无法保证打印&lt;em&gt;a&lt;/em&gt;的时候，&lt;em&gt;b&lt;/em&gt;的值一定是1.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;happens before&lt;/strong&gt;定义了内存操作的顺序，它是一种偏序。&lt;em&gt;e1&lt;/em&gt; happens before &lt;em&gt;e2&lt;/em&gt;, &lt;em&gt;e2&lt;/em&gt; happens after &lt;em&gt;e1&lt;/em&gt; 。如果 &lt;em&gt;e1&lt;/em&gt; 既不happens before &lt;em&gt;e2&lt;/em&gt; 也不happens after &lt;em&gt;e2&lt;/em&gt; ，那么 &lt;em&gt;e1&lt;/em&gt; 和 &lt;em&gt;e2&lt;/em&gt; 是并发执行的。它有传递的性质（自反性，对称性就不考虑了）。这个关系就决定了共享变量在某个上下文下面读写顺序，那么它的具体值变化也就确定了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;在一个goroutine中，happens before的顺序就是代码表达的顺序。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;共享变量 &lt;em&gt;v&lt;/em&gt; 的读操作 &lt;em&gt;r&lt;/em&gt; ，能够读到是另一个对变量 &lt;em&gt;v&lt;/em&gt; 写操作 &lt;em&gt;w&lt;/em&gt; 写入的值的条件是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;em&gt;w&lt;/em&gt; happens before &lt;em&gt;r&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;没有其他的对变量 &lt;em&gt;v&lt;/em&gt; 写操作happens before &lt;em&gt;r&lt;/em&gt; 并且happens after &lt;em&gt;w&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这两个条件并不能保证有一个与 &lt;em&gt;r&amp;amp;w&lt;/em&gt; 没有任何happens before关系的对共享变量 &lt;em&gt;v&lt;/em&gt; 写操作 &lt;em&gt;w&amp;rsquo;&lt;/em&gt; 的存在，导致 &lt;em&gt;r&lt;/em&gt; 读到的是 &lt;em&gt;w&amp;rsquo;&lt;/em&gt; 的结果。所以，保证 &lt;em&gt;r&lt;/em&gt; 的结果是 &lt;em&gt;w&lt;/em&gt; 的值的条件是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>增加bug的编程实践</title>
      <link>http://zjykzk.github.io/posts/cs/bug-op/</link>
      <pubDate>Sat, 04 Jun 2016 11:12:13 +0800</pubDate>
      <guid>http://zjykzk.github.io/posts/cs/bug-op/</guid>
      <description>&lt;h2 id=&#34;思路不清晰&#34;&gt;思路不清晰&lt;/h2&gt;&#xA;&lt;p&gt;思路没有完全确定情况下写代码。造成不确定的情况有多方面：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;1. 求快，把相似的需求当做一样的需求&#xA;2. 缺少设计，大体明白实现方案，就开始编码&#xA;3. 知识不充分，集中在前端的css、布局&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;strong&gt;怎么办？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;快是可以做到，心里不要慌就是。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;1. 需求分析到位&#xA;2. 仔细查看现有的代码&#xA;3. 遗留代码多问老员工&#xA;4. 放下别人对你问代码时的负面情绪&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;破窗原理&#34;&gt;破窗原理&lt;/h2&gt;&#xA;&lt;p&gt;在一个代码质量差的项目里面，就很容易被一种“别人也是这样，我也就这样得了”，尤其是在你不熟悉代码的情况下。&lt;strong&gt;短期内，代码是写给自己的，维护的人是自己，长期内是给别人的，对自己好就是对别人好，还有需要执行力。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>flume</title>
      <link>http://zjykzk.github.io/posts/cs/flume/</link>
      <pubDate>Sun, 27 Mar 2016 22:17:17 +0800</pubDate>
      <guid>http://zjykzk.github.io/posts/cs/flume/</guid>
      <description>&lt;h1 id=&#34;架构&#34;&gt;架构&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../imgs/flume.dot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;&#xA;&lt;h2 id=&#34;source&#34;&gt;source&lt;/h2&gt;&#xA;&lt;p&gt;数据的生成源。比如：读取一个本地文件，MQ等等。一个数据单元被封装成一个&lt;strong&gt;event&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;event&#34;&gt;event&lt;/h3&gt;&#xA;&lt;p&gt;数据单元，从&lt;strong&gt;source&lt;/strong&gt;产生，直到被序列化到存储中。&lt;strong&gt;event&lt;/strong&gt;包含&lt;em&gt;header&lt;/em&gt;，&lt;em&gt;body&lt;/em&gt;两个部分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;header: 一个map数据，可以被&lt;strong&gt;interceptor&lt;/strong&gt;引用&lt;/li&gt;&#xA;&lt;li&gt;body: 一个字节序列，具体日志数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;interceptor&#34;&gt;interceptor&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;读取一个&lt;strong&gt;event&lt;/strong&gt;在放到&lt;strong&gt;channel&lt;/strong&gt;中之前，&lt;strong&gt;event&lt;/strong&gt;可以被添加数据。比如说：采集机器的主机名称，时间戳。&lt;/p&gt;&#xA;&lt;h2 id=&#34;channel&#34;&gt;channel&lt;/h2&gt;&#xA;&lt;p&gt;数据队列，高可用的保障。&lt;strong&gt;source&lt;/strong&gt;产生的数据先放到这里，&lt;strong&gt;sink&lt;/strong&gt;接着从这里取出来放到存储当中。&lt;/p&gt;&#xA;&lt;h3 id=&#34;channel-selector&#34;&gt;channel selector&lt;/h3&gt;&#xA;&lt;p&gt;两个作用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;复制：把一个&lt;strong&gt;event&lt;/strong&gt;写到一个或者多个&lt;strong&gt;channel&lt;/strong&gt;中&lt;/li&gt;&#xA;&lt;li&gt;路由：根据&lt;strong&gt;event&lt;/strong&gt;中的某个属性值，把数据写到指定的&lt;strong&gt;channel&lt;/strong&gt;中&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;sink&#34;&gt;sink&lt;/h2&gt;&#xA;&lt;p&gt;负责把&lt;strong&gt;channel&lt;/strong&gt;中的数据写入目标存储。&lt;/p&gt;&#xA;&lt;h3 id=&#34;sink-processor&#34;&gt;sink processor&lt;/h3&gt;&#xA;&lt;p&gt;选择&lt;strong&gt;sink&lt;/strong&gt;，在这里可以完成负载均衡和容错处理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;event-serializer&#34;&gt;event serializer&lt;/h3&gt;&#xA;&lt;p&gt;把&lt;strong&gt;event&lt;/strong&gt;中的数据，转换成存储需要的格式。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
