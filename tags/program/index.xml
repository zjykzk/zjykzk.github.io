<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Program on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/program/</link>
    <description>Recent content in Program on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Thu, 11 Oct 2018 15:33:32 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/tags/program/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>guava中RateLimiter的设计</title>
      <link>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</link>
      <pubDate>Thu, 11 Oct 2018 15:33:32 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/guava-ratelimiter/</guid>
      <description>

&lt;p&gt;guava中的&lt;a href=&#34;https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java#L131&#34;&gt;RateLimiter&lt;/a&gt;实现了比较有意思的功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;平滑。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;记录未使用的信息。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存下次请求被满足的时间。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;平滑&#34;&gt;平滑&lt;/h2&gt;

&lt;p&gt;通过令牌桶算法实现。&lt;/p&gt;

&lt;h2 id=&#34;记录未使用信息&#34;&gt;记录未使用信息&lt;/h2&gt;

&lt;p&gt;实现中通过&lt;code&gt;storedPermits&lt;/code&gt;表示有多长时间没有被使用了。这个信息可以处理资源的两种情况：&lt;br /&gt;
1. 资源充足。这个实现是Burst模式。&lt;br /&gt;
2. 资源超载。比如说缓存过期，导致请求处理变慢。这个实现是Warmup模式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;storedPermits&lt;/code&gt;的计算公式：&lt;code&gt;min(maxPermits, timeNotUsedMicros/coolDownIntervalMicros())&lt;/code&gt;，其中&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;和&lt;code&gt;maxPermits&lt;/code&gt;在不同模式下面计算方式不同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当RateLimiter发现资源没有没使用一段时间以后，任务现在资源的十分充分的，当请求过来的时候直接可以满足。&lt;code&gt;storedPermits&lt;/code&gt;代表的就是当前充足资源的数量。&lt;/p&gt;

&lt;p&gt;另外，&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;返回&lt;code&gt;stableIntervalMicros&lt;/code&gt;，&lt;code&gt;maxPermits&lt;/code&gt;等于&lt;code&gt;permitsPerSecond&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warmup模式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          ^ throttling
          |
    cold  +                  /
 interval |                 /.
          |                / .
          |               /  .   ← &amp;quot;warmup period&amp;quot; is the area of the trapezoid between
          |              /   .     thresholdPermits and maxPermits
          |             /    .
          |            /     .
          |           /      .
   stable +----------/  WARM .
 interval |          .   UP  .
          |          . PERIOD.
          |          .       .
        0 +----------+-------+--------------→ storedPermits
          0 thresholdPermits maxPermits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图是warmup模式消耗&lt;code&gt;storedPermits&lt;/code&gt;所需要时间的建模。&lt;br /&gt;
1. RateLimiter的状态是一条垂直线，包含两个信息：当前的&lt;code&gt;storedPermits&lt;/code&gt;和被消耗时需要的时间。&lt;br /&gt;
2. 当RateLimiter没有被使用时，&lt;code&gt;storedPermits&lt;/code&gt;向&lt;code&gt;maxPermits&lt;/code&gt;增加，增速是&lt;code&gt;warmupPeriodMicro/maxPermits&lt;/code&gt;。&lt;br /&gt;
3. 当RateLimiter被使用时，&lt;code&gt;storedPermits&lt;/code&gt;向0减少，需要的时间是这个函数的积分。&lt;/p&gt;

&lt;p&gt;注意：&lt;br /&gt;
1. 这里&lt;code&gt;thresholdPermits&lt;/code&gt;是任意值，源代码中假设&lt;code&gt;storedPermits&lt;/code&gt;从&lt;code&gt;thresholdPermits&lt;/code&gt;减少到0需要的时间为&lt;code&gt;warmupPeriod/2&lt;/code&gt;。因此，&lt;code&gt;thresholdPermits=0.5*warmupPeriod/stableInterval&lt;/code&gt;。&lt;br /&gt;
2. 另外，&lt;code&gt;storedPermits&lt;/code&gt;从&lt;code&gt;maxPermits&lt;/code&gt;减少到&lt;code&gt;thresholdPermits&lt;/code&gt;需要的时间为&lt;code&gt;warmupPeriod&lt;/code&gt;，因此&lt;code&gt;maxPermits=thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当RateLimiter发现资源没有没使用一段时间以后，请求再来的时候，资源需要一个预热，这个过程中请求处理会比预热完以后有一个变化。这个变化的效果可以是快也可以是慢，这个是根据&lt;code&gt;coldFactor&lt;/code&gt;来定义。当这个值分三种情况：&lt;br /&gt;
1. 等于1，相当于没有预热效果。&lt;br /&gt;
2. 小于1，表示在没有使用这段时间里面，资源会有一部分的囤积，可以较快处理请求。&lt;br /&gt;
3. 大于1，表示在没有使用这段时间里面，资源被回收，需要重新申请来处理请求，所以会比较慢。&lt;/p&gt;

&lt;p&gt;另外，&lt;code&gt;coolDownIntervalMicros()&lt;/code&gt;返回&lt;code&gt;warmupPeriodMicro/maxPermits&lt;/code&gt;。这是一个任意值，没有理论依据。&lt;/p&gt;

&lt;h2 id=&#34;保存下次请求被满足的时间&#34;&gt;保存下次请求被满足的时间&lt;/h2&gt;

&lt;p&gt;这样做的好处是，可以比较方便判断在一段时间内，多个资源是否被满足的逻辑。permit的使用来源于两个地方：一段时间未使用而累积的&lt;code&gt;storedPermits&lt;/code&gt;，以及一段时间以后才能满足的，假设用&lt;code&gt;freshPermits&lt;/code&gt;表示。在不同模式下面消耗&lt;code&gt;storedPermits&lt;/code&gt;和&lt;code&gt;freshPermits&lt;/code&gt;需要的时间是不一样的。总的公式：&lt;code&gt;freshPermits * stableIntervalMicros + storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;，其中&lt;code&gt;storedPermitsToWaitTime(...)&lt;/code&gt;在不同模式下面，实现方式不一样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这个模式下面，&lt;code&gt;storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;返回值是0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warmup模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;storedPermitsToWaitTime(storedPermits,permitsToTake)&lt;/code&gt;返回的是建模函数在&lt;code&gt;storedPermits,permitsToTake&lt;/code&gt;之间的积分（图像面积）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>接口在哪里定义？</title>
      <link>http://zjykzk.github.io/post/cs/design/interface-owner/</link>
      <pubDate>Sun, 15 Jul 2018 15:11:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/interface-owner/</guid>
      <description>&lt;p&gt;接口放在哪里决定了源代码依赖问题。因此，依赖是接口定义唯一考量，其他问题都可以归结为依赖问题，而定义的包永远是被依赖包。&lt;/p&gt;

&lt;p&gt;接口定义的位置有三种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用者&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现者&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;单独一个第三方位置&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;放在使用者这边&lt;/strong&gt;，那么实现者依赖使用者的接口定义。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：可以并行开发，尤其是类似golang这样的语言，实现一接口不需要引用具体的接口定义，即使在必须引用的开发语言里面也只需要实现相关的接口，集成的时候加上是很简单的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：在实现者依赖接口定义源代码的情况下，实现者代码要提出来重用，必须要得要包含使用者的接口定义&lt;/p&gt;

&lt;p&gt;这样的方式比较适合多个使用者，单个实现者的情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;放在实现者这边&lt;/strong&gt;，那么使用者依赖实现者的接口定义。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：实现者是一个独立的包，可以很方便的重用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：使用者开发的时候需要引用实现者的接口定义，增加并行开发的难度，这里可以自己mock接口，集成的时候改成实现者的接口即可。&lt;/p&gt;

&lt;p&gt;这样的方式适合单个使用者，多个实现者情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;单独放在第三方位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：定义完接口以后，使用者和实现者都可以并行开发，同时实现者包的重用和使用者解耦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坏处&lt;/strong&gt;：包的管理变得复杂，包含接口的包会变得很薄&lt;/p&gt;

&lt;p&gt;这样的方式适合多个使用者，多个实现者情况。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常用面向对象设计原则</title>
      <link>http://zjykzk.github.io/post/cs/design/soild/</link>
      <pubDate>Wed, 04 Jul 2018 22:28:20 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/design/soild/</guid>
      <description>

&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;

&lt;p&gt;软件的复杂来源于需求的易变，意味着软件本身容易修改。好设计的目的就是提供软件的可修改能力，也就是可维护性、扩展性。SOILD原则就是在设计过程中达到这个目标的一些原则。&lt;/p&gt;

&lt;h2 id=&#34;单一职责原则&#34;&gt;单一职责原则&lt;/h2&gt;

&lt;p&gt;又名SRP（Single Responsibility Principle）。针对一个函数、类、组件、架构的修改有且只有一个理由，而理由的来自于使用者。&lt;/p&gt;

&lt;p&gt;这样的好处是把拥有相同修改理由的函数、类、组件组织在一起，不同的分开，达到修改的时候不会影响其他代码，增强了可维护性。&lt;/p&gt;

&lt;p&gt;这是一个定义简单，实操不容易正确的原则。原因在于：&lt;br /&gt;
1. &lt;strong&gt;职责&lt;/strong&gt;无法度量。&lt;br /&gt;
2. 因为团队、项目背景等待原因，在具体实现的细节中很难做到SRP。&lt;/p&gt;

&lt;p&gt;因此，在设计的时候接口一定做到SRP，实现尽量SRP。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;组件层面的SRP，叫做Component common closure，架构层面的SRP叫做axis of change responsibility for creation of architecture boundary。&lt;/p&gt;

&lt;h2 id=&#34;开闭原则&#34;&gt;开闭原则&lt;/h2&gt;

&lt;p&gt;又名OCP（Open-Close Principle）。对扩展开发，对修改关闭。&lt;/p&gt;

&lt;p&gt;通过这样的方式达到添加一个功能时，尽可能少的修改现有源代码、模块、二进制文件，尽可能的通过添加代码来实现。这样减少原来的功能被破坏的概率，达到软件的可维护性、可扩展性、可复用性。因此，它是其他面向对象设计原则的核心。&lt;/p&gt;

&lt;p&gt;遵守OCP原则的手段是&lt;strong&gt;抽象&lt;/strong&gt;。一个功能的抽象，更依赖于使用者，而非实现者。只有使用者才明白需要抽象什么内容。抽象的难点是找到易变的部分，一个指导原则是“快速失败，下不为例”，有以下几条参考实践：&lt;br /&gt;
1. TDD，先写测试代码。&lt;br /&gt;
2. 更短的开发周期。&lt;br /&gt;
3. 先开发特性，后开发基础设施代码，并经常给使用者review。&lt;br /&gt;
4. 先开发重要功能。&lt;br /&gt;
5. 经常并尽早发布，尽可能让用户和使用者使用。&lt;/p&gt;

&lt;p&gt;抽象的对象一般是类、模块以及组件。几个比较的好的实践：&lt;br /&gt;
1. 在函数参数、类抽象中提供稳定的接口定义。&lt;br /&gt;
2. 通过元数据抽象逻辑，比如通过配置的形式表达逻辑。&lt;br /&gt;
3. 定义项目章程，建立团队文化，沉淀优秀的习惯，提高开发效率。&lt;br /&gt;
4. 在架构层面，分析功能变化的来源、时机以及原因，把功能划分为不同的组件，底层组件依赖高层组件，高层组件不会受到底层组件变化的影响，同时避免循环依赖。&lt;br /&gt;
5. 抽象的时候需要避免过度抽象，带来不必要的复杂度。&lt;/p&gt;

&lt;h2 id=&#34;里氏替换原则&#34;&gt;里氏替换原则&lt;/h2&gt;

&lt;p&gt;又名LSP（Liskov Substitutiion Principle）。基类能够被子类代替，并且保证程序行为不变。&lt;/p&gt;

&lt;p&gt;OCP的实现需要使用抽象和多态，静态语言中继承是多态的一个重要实现方式。LSP就是解决继承带来的一些问题，比如侵入性、耦合性、缺乏灵活性。遵守LSP能够更加容易遵守OCP，因为子类可以替换基类，达到不修改原来代码，通过扩展的方式，添加逻辑。提高程序的健壮性，版本升级的兼容性。&lt;/p&gt;

&lt;p&gt;继承中常说的IS-A，强调的是方法的行为，子类中的方法行为要和基类中的一致，而不是性质一致。这个行为需要从设计的使用者角度来判断模块。模块逻辑的一致性，说的就是这个行为需要一致。所以，IS-A语义是子类替换时，保证程序行为一致。&lt;/p&gt;

&lt;p&gt;虽然这里LSP强调代码中的继承，其实LSP也适用于其他约定的服务、组件，这些内容修改、替换以后都不应该影响原来程序的行为。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 当子类中override的方法工作比较少时，可能违反LSP。&lt;br /&gt;
2. 采用DBC（design by contract）编程方法。约定方法的前置条件和后置条件，在LSP下，子类中的前置条件只能比基类的弱，而子类中的后置条件只能比基类的强。因为，如果子类中的前置条件强，那么替换以后原来基类的前置条件下的输入就没法满足了，同样如果子类的后置条件弱，那么方法的输出在一些情况下程序行为就会和原来的不一样。&lt;/p&gt;

&lt;h2 id=&#34;依赖反转原则&#34;&gt;依赖反转原则&lt;/h2&gt;

&lt;p&gt;又名DIP（Dependence Inversion Principle）。高层不依赖底层，依赖抽象，底层也只依赖抽象；抽象不依赖细节，细节依赖抽象。&lt;/p&gt;

&lt;p&gt;反转（inversion）包含两层含义：&lt;br /&gt;
1. 控制流和源代码依赖相反，a模块执行时会调用b模块函数，但是源代码层面来说b模块会依赖a模块。&lt;br /&gt;
2. 接口所有者，原先a模块使用b模块定义的接口，而现在接口放在了a模块中，从而从源代码层面来说b模块依赖a模块。&lt;/p&gt;

&lt;p&gt;为什么要依赖抽象？显然抽象比实现细节稳定。从编程语言角度上来说，接口变了实现不变，而实现变了，接口不一定变，显然接口更加稳定。因此，接口的稳定也十分重要。&lt;/p&gt;

&lt;p&gt;DIP能够减少类、模块之间的耦合，提供系统的稳定性，提高代码的复用性、可扩展性、可读性和可维护性。它是其他OO设计技巧的基础。&lt;/p&gt;

&lt;p&gt;建立依赖的方式：&lt;br /&gt;
1. 构造函数传递依赖对象。&lt;br /&gt;
2. setter方法传递对象。&lt;br /&gt;
3. 接口声明依赖对象，接口中的方法参数、返回值中引用其他接口。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 每个类尽量有接口或者抽象类。&lt;br /&gt;
2. 变量的表面类型尽量是接口、抽象类型或者是不易变的类。&lt;br /&gt;
3. 任何类不从易变的具体类派生。在维护代码的时候这个实践经常会被破坏。&lt;br /&gt;
4. 尽量不要override基类的方法。&lt;br /&gt;
5. 创建对象时考虑使用工厂模式。&lt;/p&gt;

&lt;h2 id=&#34;接口分离原则&#34;&gt;接口分离原则&lt;/h2&gt;

&lt;p&gt;又名ISP（Interface Segregation Principles）。使用者不应该依赖它不使用的方法。所以，分离的使用者意味着分离的接口。&lt;/p&gt;

&lt;p&gt;当你依赖的接口包含不需要的方法时，加上依赖的传递性，从源代码角度看当接口的改变，你的代码可能会跟着改变（这是因为对动态语言来说不用修改原来的代码），从架构角度看由于组件依赖，当组件修改时，会导致组件的重新编译、发布。ISP的目的还是减少类、模块间的耦合，提供类、模块的内聚性，提高代码的可扩展性、可复用性。&lt;/p&gt;

&lt;p&gt;有两类接口：&lt;br /&gt;
1. class interface，在类层面履行接口，每个实现细节实现具体的接口，在golang中就是&lt;code&gt;interface&lt;/code&gt;定义的接口。&lt;br /&gt;
2. object interface，在对象层面履行接口，每个新建的对象拥有类的方法，在golang中就是&lt;code&gt;struct&lt;/code&gt;定义的方法。&lt;/p&gt;

&lt;p&gt;SRP也强调职责分离，虽然它的效果也会有ISP的效果，但是它是从业务逻辑的角度去归类职责并进行分离。而ISP是从接口的角度去分离接口，它是在SIP的基础上进一步的细分。&lt;/p&gt;

&lt;p&gt;几个比较好的实践：&lt;br /&gt;
1. 一个接口是只服务于一个模块或者业务逻辑。&lt;br /&gt;
2. 尽量减少公共的方法。&lt;br /&gt;
3. 保持接口的干净。如果有污染尽快修复。&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;软件开发首要原则就是管理复杂度。显然，软件中的每个组成（函数、类、模块、组件）之间越独立（耦合性越低），整个软件的复杂度越低，软件就越容易维护。所以，软件设计原则中最重要的就是降低各个组成部分的耦合度。而，最重要的手段就是抽象。OOD的原则做的都是使用抽象这个利器来降低组成部分的耦合。他们从不同的角度来实现这个目标：业务逻辑角度（SRP），接口的角度（ISP），特定语言角度（LSP），软件扩展角度（OCP），组件依赖关系角度（DIP）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记一次mongo数据库优化经历</title>
      <link>http://zjykzk.github.io/post/cs/first-optimal/</link>
      <pubDate>Tue, 24 Oct 2017 18:46:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/first-optimal/</guid>
      <description>

&lt;h1 id=&#34;缘起&#34;&gt;缘起&lt;/h1&gt;

&lt;p&gt;最近，做一个项目：封装一个MQ，提供发送、拉取、查询的基本功能，需要保证一条消息只被消费一次。写完了基本功能以后，开始做benchmark。结果超级糟糕：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;发送线程数量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;消费线程数量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;发送TPS&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;消费TPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;200-400&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20-60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;而且，随着消费线程的数量增加发送&amp;amp;消费的TPS都下降。&lt;/p&gt;

&lt;h1 id=&#34;排查&#34;&gt;排查&lt;/h1&gt;

&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;

&lt;p&gt;一次发送涉及的数据库操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一次topic查询&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一次跟MQ之间的RPC&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一次写统计数据&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一次消费涉及的数据库操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;两次cas操作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;两次写统计操作&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;系统状态&#34;&gt;系统状态&lt;/h2&gt;

&lt;h3 id=&#34;磁盘io&#34;&gt;磁盘IO&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;iotop&lt;/code&gt; 发现：mongodb写磁盘速度最大2M/s。&lt;/p&gt;

&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;nethogs&lt;/code&gt; 发现：mongodb的通信速度最大200+KB/s。&lt;/p&gt;

&lt;h3 id=&#34;系统总体情况&#34;&gt;系统总体情况&lt;/h3&gt;

&lt;p&gt;通过命令&lt;code&gt;vmstat&lt;/code&gt;发现：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;系统和用户的CPU使用率都超低，两者加起来不到5%，系统的中断和上下文切换非常高，特别是上下文切换，达到了十几万/s&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;从缓存写到磁盘的io比较高好几百/s&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内存使用率非常低&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;

&lt;p&gt;问题一定是使用mongodb上面。&lt;/p&gt;

&lt;h2 id=&#34;排查-1&#34;&gt;排查&lt;/h2&gt;

&lt;h3 id=&#34;profile程序&#34;&gt;profile程序&lt;/h3&gt;

&lt;p&gt;通过golang自带的profile功能，在程序里面添加profile代码，通过&lt;code&gt;go tool pprof&lt;/code&gt;对程序做profile，用 &lt;code&gt;go-torch&lt;/code&gt;生成火焰图。发现果不其然，一个请求过程中，数据操作耗时占整体的40%以上。&lt;/p&gt;

&lt;p&gt;发送消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/create.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;拉取消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/pull.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;确认消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/finish.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过看程序以及对需求的分析，程序可以做优化：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;统计数据可以不用每次都去写数据库，把它放在内存或者写本地磁盘，定期刷到数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;去重以后的消息，可以放在内存，减少拉取消息时候一次cas操作&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb&#34;&gt;mongodb&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;mongostat&lt;/code&gt; 查看mongodb的运行状态，发现随着消费线程并发的提高锁的百分比越来越高最后超过的90%。查看mongodb的版本是2.4.9，它用的数据库锁。换个mongodb版本，避免锁的开销，通过了解公司线上使用的版本3.0.15，并使用wireTiger存储引擎。果断按照这个环境进行benchmark，结果仍然不尽任意。查看&lt;strong&gt;profiler&lt;/strong&gt;，一个类似mysql的慢查询的命令。通过以下命令加上专家的讲解，从&lt;strong&gt;信息 nscannedObjects : 71040&lt;/strong&gt;，发现扫描对象比较多，从代码确认是缺少了一个索引。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.setProfilingLevel(2);
{&amp;quot;was&amp;quot; : 0 , &amp;quot;slowms&amp;quot; : 100, &amp;quot;ok&amp;quot; : 1}       // &amp;quot;was&amp;quot; 表示旧的设置
&amp;gt; db.system.profile.find().sort({millis:-1}) // 列出耗时的操作，按照操作耗时排序，这条语句会列出扫描的对象数量，锁等关键信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在程序里面加上索引，再次benchmark达到预期。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本次调优最大问题是思维盲区，由于自己对mongodb不熟悉，就没有想到去profile mongodb，把精力放在了优化代码层面的数据库操作，中间还做过把消息放在缓存中虽然达到预期，但是有数据不一致的问题。其实，方法没对，&lt;strong&gt;优化的首要原则是做profile，profile一切。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>map 内部实现</title>
      <link>http://zjykzk.github.io/post/cs/golang/map/</link>
      <pubDate>Thu, 15 Jun 2017 19:13:25 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/golang/map/</guid>
      <description>

&lt;h1 id=&#34;类型&#34;&gt;类型&lt;/h1&gt;

&lt;p&gt;golang中的map是一个 &lt;strong&gt;指针&lt;/strong&gt;。当执行语句 &lt;code&gt;make(map[string]string)&lt;/code&gt; 的时候，其实是调用了 &lt;code&gt;makemap&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// file: runtime/hashmap.go:L222
func makemap(t *maptype, hint64, h *hmap, bucket unsafe.Pointer) *hmap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然，&lt;code&gt;makemap&lt;/code&gt; 返回的是指针。&lt;/p&gt;

&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;

&lt;h2 id=&#34;hashmap&#34;&gt;hashmap&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// hash map
type hmap struct {
    // 元素的个数 == len()返回的值，必须放在第一个位置因为 len函数需要使用
    count     int

    // map标记:
    // 1. key和value是否包指针
    // 2. 是否正在扩容
    // 3. 是否是同样大小的扩容
    // 4. 是否正在 `range`方式访问当前的buckets
    // 5. 是否有 `range`方式访问旧的bucket
    flags     uint8
    B         uint8  // log_2(B) == bucket数量
    noverflow uint16 // overflow bucket的数量，是个近似值
    hash0     uint32 // hash种子

    buckets    unsafe.Pointer // bucket slice指针，如果count == 0，这里的值为 nil
    oldbuckets unsafe.Pointer // bucket slice指针，仅当在扩容的时候不为nil
    nevacuate  uintptr        // 扩容时已经移到新的map中的bucket数量

    // 当key和value的类型不包含指针的时候，key和value就会做inline处理(怎么处理的)
    // 保证overflow的bucket活着，不被gc回收
    overflow *[2]*[]*bmap
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bucket&#34;&gt;bucket&lt;/h2&gt;

&lt;p&gt;每个bucket固定包含8个key和value。实现上面是一个固定的大小连续内存块，分成四部分：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个条目的状态&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8个key值&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8个value值&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;指向下个bucket的指针&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;数据结构定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// bucket
type bmap struct {
        // 每个条目的状态，tophash[0]表示当前bucket中的条目是否已经完全移到新的bucket中去了
        tophash [bucketCnt]uint8
        // keys
        // values
        // Followed by an overflow pointer.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;条目状态&#34;&gt;条目状态&lt;/h3&gt;

&lt;p&gt;. &lt;code&gt;0&lt;/code&gt; 空，可以被使用&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;1&lt;/code&gt; 空，bucket中的内容已经被移到了新的bucket中&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;2&lt;/code&gt; 该条目已经被移到了新的bucket，该bucket的位置在处在前半部分&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;3&lt;/code&gt; 该条目已经被移到了新的bucket，该bucket的位置在处在后半部分&lt;/p&gt;

&lt;p&gt;. 其他大于等于&lt;code&gt;4&lt;/code&gt; 的值，来自key的hash值的最高8位，如果高8位值小于4，则加4&lt;/p&gt;

&lt;h4 id=&#34;第一个条目状态&#34;&gt;第一个条目状态&lt;/h4&gt;

&lt;p&gt;bucket的第一个条目&lt;code&gt;tophash[0]&lt;/code&gt; 用来标识bucket中的条目是否已经全部被移到了新的bucket中去了， &lt;code&gt;1-3&lt;/code&gt; 表示已经移动完。&lt;/p&gt;

&lt;h3 id=&#34;内存布局&#34;&gt;内存布局&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;   ----+-----------------+ -.
   ^   |     bucket0     |  |------&amp;gt; +------------+
   |   +-----------------+ -&#39;        | tophash0-7 |
2^h.B  |     .......     |           +------------+
   |   +-----------------+           |   key0-7   |
   v   | bucket2^h.B - 1 |           +------------+
   ----+-----------------+           |  value0-7  |
                                     +------------+ -.
                                     |overflow_ptr|  |-----&amp;gt; new bucket address
                                     +------------+ -&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择这样的布局的好处：由于对齐的原因，&lt;em&gt;key0/value0/key1/value1&amp;hellip;&lt;/em&gt; 这样的形式可能需要更多的补齐空间，比如 &lt;code&gt;map[int64]int8&lt;/code&gt; ，1字节的value后面需要补齐7个字节才能保证下一个key是 &lt;code&gt;int64&lt;/code&gt; 对齐的。&lt;/p&gt;

&lt;h2 id=&#34;装载因子&#34;&gt;装载因子&lt;/h2&gt;

&lt;p&gt;装载因子决定map的资源使用率以及性能高低，在实现map时，考虑四个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;%overflow：拥有overflow的bucket的百分比&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;bytes/entry: 每个key/value的额外开销&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;hitprobe: 查找存在的key时需要检查的条目数量&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;missprobe: 查找不存在的key是需要检查的条目数量&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其测试数据如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;装载因子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;%overflow&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;bytes/entry&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;hitprobe&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;missprobe&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20.90&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.79&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;hash函数&#34;&gt;hash函数&lt;/h1&gt;

&lt;p&gt;map中的key对应着一个hash函数，用于定位bucket。在golang的hash函数是固定的，用户无法修改。golang中的预定义基本类型，像 &lt;code&gt;int32/int64/string/interface&lt;/code&gt; 等等都有一个hash函数与之对应，代码在runtime/alg.go中。对于struct/数组/slice，如果它每个字段或者元素都是有hash函数，那么该类型就有hash函数，hash值由每个字段的hash值来定义，代码在reflect/type.go函数&lt;code&gt;StructOf&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;注：&lt;code&gt;map&lt;/code&gt;是不能作为key的。&lt;/p&gt;

&lt;h1 id=&#34;扩容&#34;&gt;扩容&lt;/h1&gt;

&lt;p&gt;当进行添加元素的操作时，如果超过装载因子，或者overflow的bucket数量超出阈值，就会触发扩容的操作。如果是因为overflow的bucket数量过多引起的，map的容量不会扩大，不然就扩大为原来的大小的两倍。&lt;/p&gt;

&lt;p&gt;在实现扩容的时候，会先为需要的bucket分配新内存，然后把旧的bucket保存起来，再把旧的内容移到新的bucket中去。&lt;/p&gt;

&lt;h1 id=&#34;线程安全&#34;&gt;线程安全&lt;/h1&gt;

&lt;p&gt;map是线程不安全的。但是在实现中有很多关于并发访问的代码，比如&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在迭代的时候会做是否正在扩容&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;添加数据的时候是否有其他数据正在写，有的话会panic&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;既然不是线程安全，为啥要做这样的检查，不检查的话可以简化代码提高性能。检查的好处就是告知提醒用户并发访问了map，但是这个检查也不是百分之一百的检测到所有的并发访问。&lt;/p&gt;

&lt;h1 id=&#34;键值nan&#34;&gt;键值NaN&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; 的hash值是随机(&lt;a href=&#34;https://research.swtch.com/randhash&#34;&gt;原因&lt;/a&gt;)，也就是说每次计算hash值都有可能是不一样的。这个跟python/java等其他语言有比较大的差别。&lt;/p&gt;

&lt;p&gt;正是因为这样有了以下几个有趣的事情：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当 &lt;code&gt;NaN&lt;/code&gt; 作为key的时候，为了保持hash值的不变性，利用 &lt;code&gt;tophash&lt;/code&gt; 的最低位来判断是放在扩容以后bucket的上半部份还是下半部分&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;NaN&lt;/code&gt; 做key取数据时永远也取不到，用 &lt;code&gt;for&lt;/code&gt; 迭代map是唯一一种访问 key为&lt;code&gt;NaN&lt;/code&gt; 的内容的方式&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;迭代&#34;&gt;迭代&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 语句迭代map，在会调用函数 &lt;code&gt;mapiterinit&lt;/code&gt; 做初始化工作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;随机挑选一个起始位置开始迭代：a. bucket随机选一个，b. bucket中的起始条目也是随机的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;初始化overflow，目的是为了防止那些内联的数据被gc，导致迭代失败&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每次获取一个元素的时候调用函数&lt;code&gt;mapiternext&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>补码</title>
      <link>http://zjykzk.github.io/post/cs/complement/</link>
      <pubDate>Tue, 30 May 2017 23:18:02 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/complement/</guid>
      <description>

&lt;h2 id=&#34;加法&#34;&gt;加法&lt;/h2&gt;

&lt;p&gt;2个十进制数字的非正式算法：两个数字中相同位置的数相加，如果结果超过10产生进位，该进位在下一位数相加时加上。直到两个数字的所有位数都加完为止。&lt;/p&gt;

&lt;p&gt;考虑十进制的2位数加法，例如：16 + 26。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 6
  + 2 6
 -------
    4 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上例中的加法过程是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;6+6&lt;/code&gt; 得2，产生进位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 2 + 1&lt;/code&gt; 的4，其中最后加1是&lt;code&gt;1&lt;/code&gt;步骤的几位，最终结果是 &lt;code&gt;42&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;减法&#34;&gt;减法&lt;/h2&gt;

&lt;p&gt;2个10进制数字的非正式算法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果被减数大于等于减数，两个数字中相同位置的数相减，如果被减数小于减数，从高位借一位，轮到高位计算时要多减去一个1。直到两个数字的所有位都减完为止。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果被减数小于减数，交互减数与被减数的位置进行 &lt;code&gt;1&lt;/code&gt; 操作，把结果加一个负号&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;考虑十进制的2位数减法，例如：16 - 25。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 6
  + 2 5
 -------
    - 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上例中的加法过程是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;16&lt;/code&gt; 比&lt;code&gt;25&lt;/code&gt;小，交换两个数的位置&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;比 &lt;code&gt;6&lt;/code&gt; 小产生借位， &lt;code&gt;15-6&lt;/code&gt; 得到 &lt;code&gt;9&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2-1-1&lt;/code&gt; 得到0，最后一个 &lt;code&gt;1&lt;/code&gt;是借位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;加上负号，最终的结果是 &lt;code&gt;-9&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;补码&#34;&gt;补码&lt;/h2&gt;

&lt;p&gt;加法需要记录进位，而减法需要记录借位，比较大小，记录符号。这样减法的复杂度就要比较加法高。&lt;/p&gt;

&lt;h3 id=&#34;减法变加法&#34;&gt;减法变加法&lt;/h3&gt;

&lt;p&gt;注意到&lt;code&gt;16-25=16+(-25)&lt;/code&gt;，如果&lt;code&gt;-25&lt;/code&gt;能够表示成一个正数，那么减法就变成了加法。&lt;/p&gt;

&lt;p&gt;2位10进制的整数范围0-99，取一半用来做正数和零，一半做负数，分布如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 - 0
1 - 1
...
49 - 49
50 - -50
51 - -49
...
99 - -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照这个分布，&lt;code&gt;-25&lt;/code&gt;对应着&lt;code&gt;75&lt;/code&gt;，从而得到&lt;code&gt;16-25=16+75=91&lt;/code&gt;，再根据上面的正负数的分布&lt;code&gt;91&lt;/code&gt;就是&lt;code&gt;-9&lt;/code&gt;，完全与&lt;code&gt;16-25=-9&lt;/code&gt;吻合。&lt;/p&gt;

&lt;p&gt;另外，如果两个数和超过100，只需要减去100就是对应的结果。&lt;/p&gt;

&lt;p&gt;这种用正数表示负数的编码方式叫做补码。由于每个负数正好是100减去表示这个负数的正数，所以叫10的补码。而在二进制情况下，就叫2的补码。因为，二进制下10表示十进制的2.&lt;/p&gt;

&lt;h3 id=&#34;二进制版本&#34;&gt;二进制版本&lt;/h3&gt;

&lt;p&gt;一个6位数的二进制版本，正负数编码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000000 - 000000
000001 - 000001
...
011111 - 011111
100000 - -100000
...
111111 - -000001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;16&lt;/code&gt;的二进制&lt;code&gt;010000&lt;/code&gt;，&lt;code&gt;-25&lt;/code&gt;的二进制&lt;code&gt;100110&lt;/code&gt;，&lt;code&gt;16-15=&amp;gt;010000+100110=110110=&amp;gt;-9&lt;/code&gt;。注意到&lt;code&gt;25&lt;/code&gt;的二进制是&lt;code&gt;011001&lt;/code&gt;，而&lt;code&gt;-25&lt;/code&gt;的二进制&lt;code&gt;100110=1000000-011011=111111-011001+000001&lt;/code&gt;，恰好是对&lt;code&gt;011001&lt;/code&gt;取反加1。&lt;/p&gt;

&lt;p&gt;同时，二进制转化成十进制：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;111111 = -(1000000 - 111111)
       = -(2^6 - 2^5 - 2^4 - 2^3 - 2^2 - 2^1 - 2^0)
       = -(2^5 - 2^4 - 2^3 - 2^2 - 2^1 - 2^0)
       = -2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0
011111 = 2^4 + 2^3 + 2^2 + 2^1 + 2^0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最高位的转化取负数，其他会取正数，然后求和正好是十进制的数。&lt;/p&gt;

&lt;p&gt;这个结果对计算机来说非常有价值，因为计算机组件有一些逻辑门构成，而逻辑门只能处理真假两个值，这正好可以用01来表示，取反，加1都能很方便的用逻辑门来实现，达到了加法和减法统一，简化逻辑电路的设计。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://zjykzk.github.io/post/cs/str/</link>
      <pubDate>Thu, 19 Jan 2017 14:05:14 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/str/</guid>
      <description>

&lt;h1 id=&#34;为什么要字符&#34;&gt;为什么要字符&lt;/h1&gt;

&lt;p&gt;人类发明了文字，同时想用计算机来处理文字。由此，就产生了字符。每个字符代码一个文字的图形。&lt;/p&gt;

&lt;h1 id=&#34;字符串的表示&#34;&gt;字符串的表示&lt;/h1&gt;

&lt;p&gt;在计算机内部，只有01的信息。因此，为了能让计算机能够认识字符串，每个字符就的被映射成01数据。这个映射功能就叫编码。&lt;/p&gt;

&lt;h2 id=&#34;ascii&#34;&gt;ASCII&lt;/h2&gt;

&lt;p&gt;ASCII是美国19世纪60年代发明的一种编码，总共规定了128个字符，每个字符有1个字节大小。范围从0-127，比如&lt;code&gt;A&lt;/code&gt;的编码是&lt;code&gt;01000001&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;unicode&#34;&gt;Unicode&lt;/h2&gt;

&lt;p&gt;世界语言文字异常丰富，每个国家都有自己独特的语言文字。ASCII的编码无法编码所有的文字，因此产生了很多编码，比如中文的BIG5，GB2312等等。这些编码无法兼容，比如&lt;code&gt;中&lt;/code&gt;在GB2312编码是&lt;code&gt;1101011011010000&lt;/code&gt;，BIG5的编码是&lt;code&gt;1010010010100100&lt;/code&gt;。因此，Unicode就出现了。Unicode规定了每个字符的唯一编号，目前已经有100多万个字符。需要注意的是Unicode只规定了字符的编号，没有规定二进制的表示。&lt;/p&gt;

&lt;h2 id=&#34;utf8编码&#34;&gt;Utf8编码&lt;/h2&gt;

&lt;p&gt;utf8是Ken Thompson于1992年创建，现在已经标准化为RFC 3629。是目前使用最为广泛的unicode编码方式，其他的有utf-16，utf-32。它的特点是变长的，使用1-4个字节表示一个字符，不同的符号有不同的长度。&lt;/p&gt;

&lt;p&gt;utf8编码规则：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1. 一个字节的编码，最高位为0，其他的位表示unicode编号
  2. n个字节的编码（n&amp;gt;1），第一个字节的n位都是1，第n+1位是0，后面的每个字节的最高两位都是10，其余的位用来表示unicode编号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下表表示了utf8的编码，z表示用于编码的bit&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;unicode范围&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;utf8编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;十六进制表示&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;二进制表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000000 - 00007F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0zzzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000080 - 0007FF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;110zzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000800 - 00D7FF/00E000 - 00FFFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1110zzzz 10zzzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;010000 - 10FFFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;11110zzz 10zzzzzz 10zzzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;环境中的编码&#34;&gt;环境中的编码&lt;/h1&gt;

&lt;p&gt;一个程序读取字符的输入的时候，读取的是二进制的数据。如果程序需要理解这个字符串是什么意思，必须了解字符的编码。同理，程序输出字符串的时候必须告知字符串的编码，不然使用者就无法理解程序的输出。程序中遇到乱码的问题，都是因为一个程序输出的字符串的编码和另一个程序接受字符串时使用的编码不一致导致的。因此，在解决编码的问题的思路就是搞清楚涉及到了哪几个环境。&lt;/p&gt;

&lt;p&gt;比如：一个程序打印一个字符串到终端。程序的编码是utf8，终端显示的编码是gbk。这样就会造成乱码。&lt;/p&gt;

&lt;h1 id=&#34;不同语言的字符串的支持&#34;&gt;不同语言的字符串的支持&lt;/h1&gt;

&lt;h2 id=&#34;python-中的字符串&#34;&gt;python 中的字符串&lt;/h2&gt;

&lt;h3 id=&#34;python-2&#34;&gt;python 2&lt;/h3&gt;

&lt;h4 id=&#34;字符类型&#34;&gt;字符类型&lt;/h4&gt;

&lt;p&gt;分为byte字符串(str)和unicode(unicode)，前者的内容是字节，后者的内容是unicode中的编号。默认的是byte字符串。&lt;/p&gt;

&lt;h4 id=&#34;重要方法&#34;&gt;重要方法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# &amp;lt;type &#39;str&#39;&amp;gt; to &amp;lt;type &#39;unicode&#39;&amp;gt;
# 如果 s 是&#39;unicode&#39;类型，python会先通过encode函数把s转换成&#39;str&#39;类型
# encode函数的encoding是sys.getdefaultencoding()的值
s.decode(encoding)

# &amp;lt;type &#39;unicode&#39;&amp;gt; to &amp;lt;type &#39;str&#39;&amp;gt;
# 如果u是&#39;str&#39;类型，python会通过decode函数把u转换成&#39;unicode&#39;类型
# decode函数的encoding是sys.getdefaultencoding()的值
u.encode(encoding)

# 获取系统默认的编码
sys.getdefaultencoding()

# 修改系统的默认编码
sys.setdefaultencoding(encoding)

# 修改代码
import sys
reload(sys) # 因为python初始化的时候会把setdefaultencoding方法给删除掉
sys.setdefaultencoding(&#39;utf8&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;codecs&#34;&gt;codecs&lt;/h4&gt;

&lt;p&gt;指定encoding参数生成file-object-like对象，利用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;函数 &lt;code&gt;read&lt;/code&gt; 读取byte字符串，按照encoding的编码返回unicode&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt; 输入unicode，按照encoding的编码转换成byte字符串写入文件&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;python-3&#34;&gt;python 3&lt;/h3&gt;

&lt;p&gt;显然，python2中的字符串处理方式会变得复杂，因此在python3中字符串统一都是unicode。&lt;/p&gt;

&lt;h2 id=&#34;go中的字符串&#34;&gt;go中的字符串&lt;/h2&gt;

&lt;p&gt;go中有两种类型支持字符串分别是：&lt;code&gt;string&lt;/code&gt; 和 &lt;code&gt;rune&lt;/code&gt; 。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;string表示字节slice（分片）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rune表示unicode的编码（code point）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;go对utf8有天然的支持。go的源代码是utf8编码，&lt;code&gt;for ... range&lt;/code&gt; 循环字符串的时候也是按照utf8编码来处理每个字符，而不是字节。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://zjykzk.github.io/post/cs/prometheus/</link>
      <pubDate>Sun, 09 Oct 2016 14:45:21 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/prometheus/</guid>
      <description>

&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/promutheus.arch.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;h3 id=&#34;数据模型&#34;&gt;数据模型&lt;/h3&gt;

&lt;p&gt;prometheus把数据当作时间序列进行存储。&lt;br /&gt;
每个时间序列通过 &lt;strong&gt;metric name&lt;/strong&gt;和 &lt;strong&gt;key-value pairs&lt;/strong&gt;(也叫做 &lt;strong&gt;label&lt;/strong&gt;)标识。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;metric name&lt;/strong&gt;表示需要进行测量的系统指标。&lt;br /&gt;
它允许包含ASCII字母，数字，下划线和分号。&lt;br /&gt;
正则表示为：[a-zA-Z&lt;em&gt;:][a-zA-Z0-9&lt;/em&gt;:]*。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;label&lt;/strong&gt;表示一个系统指标的维度，可以按照这个维度进行查询统计。&lt;br /&gt;
Label名字允许包含ASCII字母，数字以及下划线。&lt;br /&gt;
正则表示为：[a-zA-Z&lt;em&gt;][a-zA-Z0-9&lt;/em&gt;]*。同时，“__”开头的名字系统保留的。&lt;br /&gt;
Label值允许任意的Unicode字符&lt;/p&gt;

&lt;h3 id=&#34;度量类型&#34;&gt;度量类型&lt;/h3&gt;

&lt;h4 id=&#34;counter&#34;&gt;Counter&lt;/h4&gt;

&lt;p&gt;累计统计度量的单个值。适用于只增不减度量，比如累计请求数量。&lt;/p&gt;

&lt;h4 id=&#34;gauge&#34;&gt;Gauge&lt;/h4&gt;

&lt;p&gt;统计度量的单个值。适用于可以增减的度量，比如当前的内存使用情况。&lt;/p&gt;

&lt;h4 id=&#34;histogram&#34;&gt;Histogram&lt;/h4&gt;

&lt;p&gt;统计度量事件发生的次数以及度量值的和。还支持统计小于某个阀值的度量事件发生的次数。&lt;/p&gt;

&lt;p&gt;这个度量类型有三个时间序列统计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_bucket{le=&amp;laquo;upper inclusive bound&amp;raquo;}：小于某个阀值的度量事件发生的次数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_sum：度量值的和&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_count：度量事件发生的次数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;统计度量时间发生的次数以及度量值的和。还支持统计某个百分比内的度量事件发生的次数。&lt;/p&gt;

&lt;p&gt;这个度量类型有三个时间序列统计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;{quantile=&amp;raquo;&amp;lt;p&amp;gt;&amp;laquo;}：度量值在前百分之p的度量事件发生的次数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_sum：度量值的和&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_count：度量事件发生的次数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;job-instance&#34;&gt;Job &amp;amp; Instance&lt;/h3&gt;

&lt;p&gt;在prometheus里面对监控的对象分成Job和Instance。Instance代表一个监控的实例。比如&lt;br /&gt;
一个支付进程。Job代表一个监控的逻辑单位。&lt;br /&gt;
比如支付服务，它在多台机器上面部署着，每台机器对应一个Instance。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;job: payment-server&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;instance 1: 1.2.3.4:5678&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance 2: 1.2.3.5:5689&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance 3: 1.2.3.6:5689&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;自动生成的label和时间序列&#34;&gt;自动生成的label和时间序列&lt;/h4&gt;

&lt;p&gt;当prometheus抓取一个目标的时候，会自动生成时间序列以及label，用来标识抓取的目标状态。&lt;/p&gt;

&lt;p&gt;label:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;job: 配置好的job名字&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance:&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;格式的url&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;时间序列：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;up{job=&amp;raquo;&amp;lt;job-name&amp;gt;&amp;laquo;, instance=&amp;raquo;&amp;lt;host:port&amp;gt;&amp;laquo;}：1 表示监控目标活着，0表示挂了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;scrape_duration_seconds{job=&amp;raquo;&amp;lt;job-name&amp;gt;&amp;laquo;, instance=&amp;raquo;&amp;lt;host:port&amp;gt;&amp;laquo;}：抓取日志的时间&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
