<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>program on 老K随笔</title>
    <link>http://zjykzk.github.io/tags/program/</link>
    <description>Recent content in program on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Fri, 19 Apr 2019 16:19:31 +0800</lastBuildDate>
    
	<atom:link href="http://zjykzk.github.io/tags/program/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技术选型</title>
      <link>http://zjykzk.github.io/posts/cs/select-tech/</link>
      <pubDate>Fri, 19 Apr 2019 16:19:31 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/select-tech/</guid>
      <description>因数 项目因数 规模 小：可以选用新技术 大：使用成熟技术
时间 紧：买商用的 宽裕：自己搞
成本 有钱：买现成的 没钱：自己撸
非功能性需求 高并发、低延迟、高可用、数据一致性、安全性。
团队因数 当前团队成员的技术栈 选大家都熟悉的：方便开发，排查问题。
领导需要前瞻性。
分析和实验 征求团队意见，大家讨论分析实验。
版权因数 选择合适的开源协议的软件：GPL/BSD/LGPL。考虑因数：商用、闭源、修改。
技术因数 标准功能 我们需要的功能，比如说我们需要一个MQ，标准功能就是发拉消息，pub/sub。
非标准功能    特性 描述     可伸缩性 产品在性能上必须能容易且有效地伸缩以满足业务需求增长的需求。   灵活性 产品必须易于适应新的需求。   可操作性 产品必须被设计成易于与共享的数据和广泛可得的系统通讯。   可扩展性 产品功能必须在供应商很少介入的情况下能够定制和快速地增强。   可使用性 只需很少的培训就能使让顾客使用产品和他的任何特性，产品应该被设计成其目标使用者的技术水平很匹配。   高效率 产品应能在各种性能水平上工作，能够应付应用对效率的要求。   可靠性 产品必须有被证实可在预定环境中工作的功能与特性。   可管理性 产品必须能被配置、部署、监控和优化以确保其在预定的环境中工作良好   安全 产品必须保护信息和事务的完整性   高可用 通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性。    技术标准</description>
    </item>
    
    <item>
      <title>guava中RateLimiter的设计</title>
      <link>http://zjykzk.github.io/posts/cs/design/guava-ratelimiter/</link>
      <pubDate>Thu, 11 Oct 2018 15:33:32 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/design/guava-ratelimiter/</guid>
      <description>guava中的RateLimiter实现了比较有意思的功能：
 平滑。 记录未使用的信息。 保存下次请求被满足的时间。  平滑 通过令牌桶算法实现。
记录未使用信息 实现中通过storedPermits表示有多长时间没有被使用了。这个信息可以处理资源的两种情况：
 资源充足。这个实现是Burst模式。 资源超载。比如说缓存过期，导致请求处理变慢。这个实现是Warmup模式。  storedPermits的计算公式：min(maxPermits, timeNotUsedMicros/coolDownIntervalMicros())，其中coolDownIntervalMicros()和maxPermits在不同模式下面计算方式不同。
Burst模式
当RateLimiter发现资源没有没使用一段时间以后，任务现在资源的十分充分的，当请求过来的时候直接可以满足。storedPermits代表的就是当前充足资源的数量。
另外，coolDownIntervalMicros()返回stableIntervalMicros，maxPermits等于permitsPerSecond。
Warmup模式
 ^ throttling | cold + / interval | /. | / . | / . ← &amp;quot;warmup period&amp;quot; is the area of the trapezoid between | / . thresholdPermits and maxPermits | / . | / . | / . stable +----------/ WARM . interval | . UP . | .</description>
    </item>
    
    <item>
      <title>接口在哪里定义？</title>
      <link>http://zjykzk.github.io/posts/cs/design/interface-owner/</link>
      <pubDate>Sun, 15 Jul 2018 15:11:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/design/interface-owner/</guid>
      <description>接口放在哪里决定了源代码依赖问题。因此，依赖是接口定义唯一考量，其他问题都可以归结为依赖问题，而定义的包永远是被依赖包。
接口定义的位置有三种情况：
 使用者 实现者 单独一个第三方位置  放在使用者这边，那么实现者依赖使用者的接口定义。
好处：可以并行开发，尤其是类似golang这样的语言，实现一接口不需要引用具体的接口定义，即使在必须引用的开发语言里面也只需要实现相关的接口，集成的时候加上是很简单的。
坏处：在实现者依赖接口定义源代码的情况下，实现者代码要提出来重用，必须要得要包含使用者的接口定义
这样的方式比较适合多个使用者，单个实现者的情况。
放在实现者这边，那么使用者依赖实现者的接口定义。
好处：实现者是一个独立的包，可以很方便的重用。
坏处：使用者开发的时候需要引用实现者的接口定义，增加并行开发的难度，这里可以自己mock接口，集成的时候改成实现者的接口即可。
这样的方式适合单个使用者，多个实现者情况。
单独放在第三方位置
好处：定义完接口以后，使用者和实现者都可以并行开发，同时实现者包的重用和使用者解耦。
坏处：包的管理变得复杂，包含接口的包会变得很薄
这样的方式适合多个使用者，多个实现者情况。
 </description>
    </item>
    
    <item>
      <title>常用面向对象设计原则</title>
      <link>http://zjykzk.github.io/posts/cs/design/soild/</link>
      <pubDate>Wed, 04 Jul 2018 22:28:20 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/design/soild/</guid>
      <description>设计 软件的复杂来源于需求的易变，意味着软件本身容易修改。好设计的目的就是提供软件的可修改能力，也就是可维护性、扩展性。SOILD原则就是在设计过程中达到这个目标的一些原则。
单一职责原则 又名SRP（Single Responsibility Principle）。针对一个函数、类、组件、架构的修改有且只有一个理由，而理由的来自于使用者。
这样的好处是把拥有相同修改理由的函数、类、组件组织在一起，不同的分开，达到修改的时候不会影响其他代码，增强了可维护性。
这是一个定义简单，实操不容易正确的原则。原因在于：
 职责无法度量。 因为团队、项目背景等待原因，在具体实现的细节中很难做到SRP。  因此，在设计的时候接口一定做到SRP，实现尽量SRP。
注：
组件层面的SRP，叫做Component common closure，架构层面的SRP叫做axis of change responsibility for creation of architecture boundary。
开闭原则 又名OCP（Open-Close Principle）。对扩展开发，对修改关闭。
通过这样的方式达到添加一个功能时，尽可能少的修改现有源代码、模块、二进制文件，尽可能的通过添加代码来实现。这样减少原来的功能被破坏的概率，达到软件的可维护性、可扩展性、可复用性。因此，它是其他面向对象设计原则的核心。
遵守OCP原则的手段是抽象。一个功能的抽象，更依赖于使用者，而非实现者。只有使用者才明白需要抽象什么内容。抽象的难点是找到易变的部分，一个指导原则是“快速失败，下不为例”，有以下几条参考实践：
 TDD，先写测试代码。 更短的开发周期。 先开发特性，后开发基础设施代码，并经常给使用者review。 先开发重要功能。 经常并尽早发布，尽可能让用户和使用者使用。  抽象的对象一般是类、模块以及组件。几个比较的好的实践：
 在函数参数、类抽象中提供稳定的接口定义。 通过元数据抽象逻辑，比如通过配置的形式表达逻辑。 定义项目章程，建立团队文化，沉淀优秀的习惯，提高开发效率。 在架构层面，分析功能变化的来源、时机以及原因，把功能划分为不同的组件，底层组件依赖高层组件，高层组件不会受到底层组件变化的影响，同时避免循环依赖。 抽象的时候需要避免过度抽象，带来不必要的复杂度。  里氏替换原则 又名LSP（Liskov Substitutiion Principle）。基类能够被子类代替，并且保证程序行为不变。
OCP的实现需要使用抽象和多态，静态语言中继承是多态的一个重要实现方式。LSP就是解决继承带来的一些问题，比如侵入性、耦合性、缺乏灵活性。遵守LSP能够更加容易遵守OCP，因为子类可以替换基类，达到不修改原来代码，通过扩展的方式，添加逻辑。提高程序的健壮性，版本升级的兼容性。
继承中常说的IS-A，强调的是方法的行为，子类中的方法行为要和基类中的一致，而不是性质一致。这个行为需要从设计的使用者角度来判断模块。模块逻辑的一致性，说的就是这个行为需要一致。所以，IS-A语义是子类替换时，保证程序行为一致。
虽然这里LSP强调代码中的继承，其实LSP也适用于其他约定的服务、组件，这些内容修改、替换以后都不应该影响原来程序的行为。
几个比较好的实践：
 当子类中override的方法工作比较少时，可能违反LSP。 采用DBC（design by contract）编程方法。约定方法的前置条件和后置条件，在LSP下，子类中的前置条件只能比基类的弱，而子类中的后置条件只能比基类的强。因为，如果子类中的前置条件强，那么替换以后原来基类的前置条件下的输入就没法满足了，同样如果子类的后置条件弱，那么方法的输出在一些情况下程序行为就会和原来的不一样。  依赖反转原则 又名DIP（Dependence Inversion Principle）。高层不依赖底层，依赖抽象，底层也只依赖抽象；抽象不依赖细节，细节依赖抽象。
反转（inversion）包含两层含义：
 控制流和源代码依赖相反，a模块执行时会调用b模块函数，但是源代码层面来说b模块会依赖a模块。 接口所有者，原先a模块使用b模块定义的接口，而现在接口放在了a模块中，从而从源代码层面来说b模块依赖a模块。  为什么要依赖抽象？显然抽象比实现细节稳定。从编程语言角度上来说，接口变了实现不变，而实现变了，接口不一定变，显然接口更加稳定。因此，接口的稳定也十分重要。
DIP能够减少类、模块之间的耦合，提供系统的稳定性，提高代码的复用性、可扩展性、可读性和可维护性。它是其他OO设计技巧的基础。</description>
    </item>
    
    <item>
      <title>记一次mongo数据库优化经历</title>
      <link>http://zjykzk.github.io/posts/cs/first-optimal/</link>
      <pubDate>Tue, 24 Oct 2017 18:46:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/first-optimal/</guid>
      <description>缘起 最近，做一个项目：封装一个MQ，提供发送、拉取、查询的基本功能，需要保证一条消息只被消费一次。写完了基本功能以后，开始做benchmark。结果超级糟糕：
   发送线程数量 消费线程数量 发送TPS 消费TPS     3 3 200-400 20-60    而且，随着消费线程的数量增加发送&amp;amp;消费的TPS都下降。
排查 接口 一次发送涉及的数据库操作：
 一次topic查询 一次跟MQ之间的RPC 一次写统计数据  一次消费涉及的数据库操作：
 两次cas操作 两次写统计操作  系统状态 磁盘IO 通过命令 iotop 发现：mongodb写磁盘速度最大2M/s。
网络 通过命令 nethogs 发现：mongodb的通信速度最大200+KB/s。
系统总体情况 通过命令vmstat发现：
 系统和用户的CPU使用率都超低，两者加起来不到5%，系统的中断和上下文切换非常高，特别是上下文切换，达到了十几万/s 从缓存写到磁盘的io比较高好几百/s 内存使用率非常低  结论 问题一定是使用mongodb上面。
排查 profile程序 通过golang自带的profile功能，在程序里面添加profile代码，通过go tool pprof对程序做profile，用 go-torch生成火焰图。发现果不其然，一个请求过程中，数据操作耗时占整体的40%以上。
发送消息火焰图
拉取消息火焰图
确认消息火焰图
通过看程序以及对需求的分析，程序可以做优化：
 统计数据可以不用每次都去写数据库，把它放在内存或者写本地磁盘，定期刷到数据库 去重以后的消息，可以放在内存，减少拉取消息时候一次cas操作  mongodb 通过命令 mongostat 查看mongodb的运行状态，发现随着消费线程并发的提高锁的百分比越来越高最后超过的90%。查看mongodb的版本是2.4.9，它用的数据库锁。换个mongodb版本，避免锁的开销，通过了解公司线上使用的版本3.0.15，并使用wireTiger存储引擎。果断按照这个环境进行benchmark，结果仍然不尽任意。查看profiler，一个类似mysql的慢查询的命令。通过以下命令加上专家的讲解，从信息 nscannedObjects : 71040，发现扫描对象比较多，从代码确认是缺少了一个索引。</description>
    </item>
    
    <item>
      <title>map 内部实现</title>
      <link>http://zjykzk.github.io/posts/cs/golang/map/</link>
      <pubDate>Thu, 15 Jun 2017 19:13:25 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/golang/map/</guid>
      <description>类型 golang中的map是一个 指针。当执行语句 make(map[string]string) 的时候，其实是调用了 makemap 函数：
// file: runtime/hashmap.go:L222 func makemap(t *maptype, hint64, h *hmap, bucket unsafe.Pointer) *hmap 显然，makemap 返回的是指针。
数据结构 hashmap // hash map type hmap struct { // 元素的个数 == len()返回的值，必须放在第一个位置因为 len函数需要使用  count int // map标记:  // 1. key和value是否包指针  // 2. 是否正在扩容  // 3. 是否是同样大小的扩容  // 4. 是否正在 `range`方式访问当前的buckets  // 5. 是否有 `range`方式访问旧的bucket  flags uint8 B uint8 // log_2(B) == bucket数量  noverflow uint16 // overflow bucket的数量，是个近似值  hash0 uint32 // hash种子  buckets unsafe.</description>
    </item>
    
    <item>
      <title>补码</title>
      <link>http://zjykzk.github.io/posts/cs/complement/</link>
      <pubDate>Tue, 30 May 2017 23:18:02 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/complement/</guid>
      <description>加法 2个十进制数字的非正式算法：两个数字中相同位置的数相加，如果结果超过10产生进位，该进位在下一位数相加时加上。直到两个数字的所有位数都加完为止。
考虑十进制的2位数加法，例如：16 + 26。
 1 6 + 2 6 ------- 4 2 上例中的加法过程是：
 6+6 得2，产生进位 1 + 2 + 1 的4，其中最后加1是1步骤的几位，最终结果是 42  减法 2个10进制数字的非正式算法：
 如果被减数大于等于减数，两个数字中相同位置的数相减，如果被减数小于减数，从高位借一位，轮到高位计算时要多减去一个1。直到两个数字的所有位都减完为止。 如果被减数小于减数，交互减数与被减数的位置进行 1 操作，把结果加一个负号  考虑十进制的2位数减法，例如：16 - 25。
 1 6 + 2 5 ------- - 9 上例中的加法过程是：
 16 比25小，交换两个数的位置 5比 6 小产生借位， 15-6 得到 9 2-1-1 得到0，最后一个 1是借位 加上负号，最终的结果是 -9  补码 加法需要记录进位，而减法需要记录借位，比较大小，记录符号。这样减法的复杂度就要比较加法高。
减法变加法 注意到16-25=16+(-25)，如果-25能够表示成一个正数，那么减法就变成了加法。
2位10进制的整数范围0-99，取一半用来做正数和零，一半做负数，分布如下：
0 - 0 1 - 1 .</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://zjykzk.github.io/posts/cs/str/</link>
      <pubDate>Thu, 19 Jan 2017 14:05:14 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/str/</guid>
      <description>为什么要字符 人类发明了文字，同时想用计算机来处理文字。由此，就产生了字符。每个字符代码一个文字的图形。
字符串的表示 在计算机内部，只有01的信息。因此，为了能让计算机能够认识字符串，每个字符就的被映射成01数据。这个映射功能就叫编码。
ASCII ASCII是美国19世纪60年代发明的一种编码，总共规定了128个字符，每个字符有1个字节大小。范围从0-127，比如A的编码是01000001
Unicode 世界语言文字异常丰富，每个国家都有自己独特的语言文字。ASCII的编码无法编码所有的文字，因此产生了很多编码，比如中文的BIG5，GB2312等等。这些编码无法兼容，比如中在GB2312编码是1101011011010000，BIG5的编码是1010010010100100。因此，Unicode就出现了。Unicode规定了每个字符的唯一编号，目前已经有100多万个字符。需要注意的是Unicode只规定了字符的编号，没有规定二进制的表示。
Utf8编码 utf8是Ken Thompson于1992年创建，现在已经标准化为RFC 3629。是目前使用最为广泛的unicode编码方式，其他的有utf-16，utf-32。它的特点是变长的，使用1-4个字节表示一个字符，不同的符号有不同的长度。
utf8编码规则：
 1. 一个字节的编码，最高位为0，其他的位表示unicode编号 2. n个字节的编码（n&amp;gt;1），第一个字节的n位都是1，第n+1位是0，后面的每个字节的最高两位都是10，其余的位用来表示unicode编号  下表表示了utf8的编码，z表示用于编码的bit
   unicode范围 utf8编码     十六进制表示 二进制表示   000000 - 00007F 0zzzzzzz   000080 - 0007FF 110zzzzz 10zzzzzz   000800 - 00D7FF/00E000 - 00FFFF 1110zzzz 10zzzzzz 10zzzzzz   010000 - 10FFFF 11110zzz 10zzzzzz 10zzzzzz 10zzzzzz    环境中的编码 一个程序读取字符的输入的时候，读取的是二进制的数据。如果程序需要理解这个字符串是什么意思，必须了解字符的编码。同理，程序输出字符串的时候必须告知字符串的编码，不然使用者就无法理解程序的输出。程序中遇到乱码的问题，都是因为一个程序输出的字符串的编码和另一个程序接受字符串时使用的编码不一致导致的。因此，在解决编码的问题的思路就是搞清楚涉及到了哪几个环境。
比如：一个程序打印一个字符串到终端。程序的编码是utf8，终端显示的编码是gbk。这样就会造成乱码。
不同语言的字符串的支持 python 中的字符串 python 2 字符类型 分为byte字符串(str)和unicode(unicode)，前者的内容是字节，后者的内容是unicode中的编号。默认的是byte字符串。</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://zjykzk.github.io/posts/cs/prometheus/</link>
      <pubDate>Sun, 09 Oct 2016 14:45:21 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/posts/cs/prometheus/</guid>
      <description>架构 基本概念 数据模型 prometheus把数据当作时间序列进行存储。 每个时间序列通过 metric name和 key-value pairs(也叫做 label)标识。
metric name表示需要进行测量的系统指标。 它允许包含ASCII字母，数字，下划线和分号。 正则表示为：[a-zA-Z_:][a-zA-Z0-9_:]*。
label表示一个系统指标的维度，可以按照这个维度进行查询统计。 Label名字允许包含ASCII字母，数字以及下划线。 正则表示为：[a-zA-Z_][a-zA-Z0-9_]*。同时，“__”开头的名字系统保留的。 Label值允许任意的Unicode字符
度量类型 Counter 累计统计度量的单个值。适用于只增不减度量，比如累计请求数量。
Gauge 统计度量的单个值。适用于可以增减的度量，比如当前的内存使用情况。
Histogram 统计度量事件发生的次数以及度量值的和。还支持统计小于某个阀值的度量事件发生的次数。
这个度量类型有三个时间序列统计：
 &amp;lt;base_name&amp;gt;_bucket{le=&amp;quot;upper inclusive bound&amp;rdquo;}：小于某个阀值的度量事件发生的次数 &amp;lt;base_name&amp;gt;_sum：度量值的和 &amp;lt;base_name&amp;gt;_count：度量事件发生的次数  Summary 统计度量时间发生的次数以及度量值的和。还支持统计某个百分比内的度量事件发生的次数。
这个度量类型有三个时间序列统计：
 &amp;lt;base_name&amp;gt;{quantile=&amp;rdquo;&amp;lt;p&amp;gt;&amp;rdquo;}：度量值在前百分之p的度量事件发生的次数 &amp;lt;base_name&amp;gt;_sum：度量值的和 &amp;lt;base_name&amp;gt;_count：度量事件发生的次数  Job &amp;amp; Instance 在prometheus里面对监控的对象分成Job和Instance。Instance代表一个监控的实例。比如 一个支付进程。Job代表一个监控的逻辑单位。 比如支付服务，它在多台机器上面部署着，每台机器对应一个Instance。
 job: payment-server  instance 1: 1.2.3.4:5678 instance 2: 1.2.3.5:5689 instance 3: 1.2.3.6:5689    自动生成的label和时间序列 当prometheus抓取一个目标的时候，会自动生成时间序列以及label，用来标识抓取的目标状态。
label:
 job: 配置好的job名字 instance:&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;格式的url  时间序列：</description>
    </item>
    
  </channel>
</rss>