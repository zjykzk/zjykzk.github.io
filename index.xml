<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>老K随笔</title>
    <link>http://zjykzk.github.io/</link>
    <description>Recent content on 老K随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhangkai.zju@gmail.com (zenk)</managingEditor>
    <webMaster>zhangkai.zju@gmail.com (zenk)</webMaster>
    <copyright>(c) 2017 zenk.</copyright>
    <lastBuildDate>Sun, 04 Feb 2018 17:13:52 +0800</lastBuildDate>
    <atom:link href="http://zjykzk.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>打坐感悟</title>
      <link>http://zjykzk.github.io/post/buddhism/dazuo/</link>
      <pubDate>Sun, 04 Feb 2018 17:13:52 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/buddhism/dazuo/</guid>
      <description>&lt;p&gt;自从老师教打坐已经7年了。在腿疼这一点上一直无法完全克服，经常被想去除腿疼的念头带走，然后起坐。今天趁儿子午睡入座，结果50分钟起坐了，原因照旧。但是，打坐腿疼时并没有忘记观照：腿疼的境，以及想起坐的念头无非都是自己的心念而已，如何对待依然由“自己”做主。&lt;/p&gt;

&lt;p&gt;起坐以后，接着打坐时的思路继续思维，在境来时不是恰好我练习的关照的最好时刻么，趁儿子未醒，接着下座。这次，入座腿疼的境以及起坐的念头如期而至，有了上次的思维，我把心专注在大明咒上，尽量保持不让腿疼的境和起坐的念头所带走，一直到心中有把握任他们起落而不被他们带走，起坐，心中法喜充满。至此，腿疼的问题可以告一段落。&lt;/p&gt;

&lt;p&gt;在坐中居然还冒出一句：心念出现，心不随念转，它就上伤到你；心念本伤不到你，心也就不会随境所转。当然，这是对负面的念头而言，其实正面的念头何尝不是如此。感恩老师教诲！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim常用操作</title>
      <link>http://zjykzk.github.io/post/cs/vim-tips/</link>
      <pubDate>Wed, 10 Jan 2018 18:16:35 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/vim-tips/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;在命令模式使用函数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;:%s/ab(.*)c/\=submatch(1) . &#39;test&#39;/gc
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;窗口间切换&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;跳转至某个窗口：窗口number + c-w + w：
跳至当前位置的左边某个窗口：c-w &amp;lt;number&amp;gt;h
跳至当前位置的右边某个窗口：c-w &amp;lt;number&amp;gt;l
跳至当前位置的上边某个窗口：c-w &amp;lt;number&amp;gt;j
跳至当前位置的下边某个窗口：c-w &amp;lt;number&amp;gt;k
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;全文缩进&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;gg=G
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;把数字替换成原来的数字减一&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;:%s/(\d+)/\=submatch(1)-1/gc
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;移动屏幕&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;H // 把当前行的位置移到最上面
M // 把当前行的位置移到屏幕中间
L // 把当前的位置移到屏幕底部
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;全局操作&lt;code&gt;g&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;:{range}g/patten/{range}/cmd // 后面的range是基于前面查询的结果
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;移动窗口&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;CTRL-W [K/J/H/L/T] //  把窗口移到最上面、下面、左边、右边、新标签
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>jit的基本原理以及实现</title>
      <link>http://zjykzk.github.io/post/cs/jit/</link>
      <pubDate>Wed, 03 Jan 2018 15:12:25 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/jit/</guid>
      <description>

&lt;h2 id=&#34;基本原理&#34;&gt;基本原理&lt;/h2&gt;

&lt;p&gt;JIT（Just-In-Time）是指程序运行的过程中生成可执行的代码。这里有两个工作：&lt;br /&gt;
1. 生成可以执行的代码&lt;br /&gt;
2. 执行代码&lt;/p&gt;

&lt;h3 id=&#34;生成代码&#34;&gt;生成代码&lt;/h3&gt;

&lt;p&gt;生成的代码是平台相关，一般就是一些机器码。&lt;/p&gt;

&lt;h3 id=&#34;执行代码&#34;&gt;执行代码&lt;/h3&gt;

&lt;p&gt;生成的代码如果要被执行，必须要确保代码所在的内存拥有可执行的标志。在linux下面通过&lt;code&gt;mmap&lt;/code&gt;系统调用映射一块可执行的内存，然后把相关的代码复制到这块内存中。最后，把内存首地址转换成函数地址并进行调用。&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello，World&lt;/h2&gt;

&lt;p&gt;一个基于x86_64平台的JIT代码， 通过系统调用&lt;code&gt;write&lt;/code&gt;实现打印&lt;code&gt;hello,world！&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;基于x86-64平台的jit代码&#34;&gt;基于x86_64平台的JIT代码&lt;/h3&gt;

&lt;p&gt;linux下面系统调用通过软中断来实现，参数通过寄存器来传递。寄存器的使用情况如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------+--------+--------+--------+--------+--------+--------+
| Syscall #| Param 1| Param 2| Param 3| Param 4| Param 5| Param 6|
+----------+--------+--------+--------+--------+--------+--------+
| rax      |  rdi   |  rsi   |   rdx  |   r10  |   r8   |   r9   |
+----------+--------+--------+--------+--------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统调用&lt;a href=&#34;http://man7.org/linux/man-pages/man2/write.2.html&#34;&gt;write(int fd, const void *buf, size_t count)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参数&lt;code&gt;fd&lt;/code&gt;:文件描述符号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;参数&lt;code&gt;buf&lt;/code&gt;:输出的内存起始地址&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;参数&lt;code&gt;count&lt;/code&gt;:输出的字节数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，x86_64平台下调用&lt;code&gt;write&lt;/code&gt;的机器码为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0:  48 c7 c0 01 00 00 00    mov    rax,0x1
7:  48 c7 c7 01 00 00 00    mov    rdi,0x1
e:  48 c7 c2 0c 00 00 00    mov    rdx,0xc
15: 48 8d 35 03 00 00 00    lea    rsi,[rip+0x4]        # 0x1f
1c: 0f 05                   syscall
1e: c3 cc                   ret
1f: 48 65 6c 6c 6f 20 57 6f 72 6c 64 21   // Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中：&lt;br /&gt;
1. &lt;code&gt;rax&lt;/code&gt;值为1，系统调用&lt;code&gt;write&lt;/code&gt;的编号&lt;br /&gt;
2. &lt;code&gt;rdi&lt;/code&gt;值为1，参数&lt;code&gt;fd&lt;/code&gt;的值，标准输出&lt;br /&gt;
3. &lt;code&gt;rsi&lt;/code&gt;值为&lt;code&gt;rip+4&lt;/code&gt;，参数&lt;code&gt;buf&lt;/code&gt;的值，通过相对地址得到&lt;br /&gt;
4. &lt;code&gt;rdx&lt;/code&gt;值为0xc（12），参数&lt;code&gt;count&lt;/code&gt;的值&lt;/p&gt;

&lt;h3 id=&#34;执行代码-1&#34;&gt;执行代码&lt;/h3&gt;

&lt;p&gt;通过系统调用&lt;a href=&#34;http://man7.org/linux/man-pages/man2/mmap.2.html&#34;&gt;void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)&lt;/a&gt;创建内存映射，确保这块内存可以执行，通过参数&lt;code&gt;prot&lt;/code&gt;指定，其中&lt;code&gt;PROT_EXEC&lt;/code&gt;可执行，&lt;code&gt;PROT_READ&lt;/code&gt;可读，&lt;code&gt;PROD_WRITE&lt;/code&gt;可写。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unsigned short code[] = {
    0x48c7, 0xc001, 0x0,          // mov %rax,$0x1
    0x48, 0xc7c7, 0x100, 0x0,     // mov %rdi,$0x1
    0x48c7, 0xc20c, 0x0,          // mov 0x12, %rdx
    0x48, 0x8d35, 0x400, 0x0,     // lea 0x4(%rip), %rsi
    0xf05,                        // syscall
    0xc3cc,                       // ret
    0x4865, 0x6c6c, 0x6f20,       // Hello_(whitespace)
    0x576f, 0x726c, 0x6421, 0xa,  // World!
};

#define PROTS PROT_READ|PROT_WRITE|PROT_EXEC
#define FLAGS MAP_PRIVATE|MAP_ANONYMOUS

void *m = mmap(NULL, sizeof(code), PROTS, FLAGS, -1, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，把机器码复制到刚刚映射的内存中，注意为了显示方便机器码保存在了&lt;code&gt;unsigned short&lt;/code&gt;数组中，加上x86_64平台字节顺序按照小端来存储，需要把机器码字节顺序调换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; sizeof(code)/sizeof(code[0]); i++) {
    *((unsigned short *)m+i) = (unsigned short)(((code[i]&amp;gt;&amp;gt;8) | (code[i]&amp;lt;&amp;lt;8)) &amp;amp; 0xffff);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，调用一个没有参数以及没有返回值的函数：&lt;code&gt;void (*)()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;((void (*)())m)();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;完整代码&#34;&gt;完整代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#define _GNU_SOURCE

int main(void) {
  unsigned short code[] = {
    0x48c7, 0xc001, 0x0,          // mov %rax,$0x1
    0x48, 0xc7c7, 0x100, 0x0,     // mov %rdi,$0x1
    0x48c7, 0xc20c, 0x0,          // mov 0x12, %rdx
    0x48, 0x8d35, 0x400, 0x0,     // lea 0x4(%rip), %rsi
    0xf05,                        // syscall
    0xc3cc,                       // ret
    0x4865, 0x6c6c, 0x6f20,       // Hello_(whitespace)
    0x576f, 0x726c, 0x6421, 0xa,  // World!
  };

#define PROTS PROT_READ|PROT_WRITE|PROT_EXEC
#define FLAGS MAP_PRIVATE|MAP_ANONYMOUS

  void *m = mmap(NULL, sizeof(code), PROTS, FLAGS, -1, 0);
  if (m == MAP_FAILED) {
      printf(&amp;quot;mmap error&amp;quot;);
      return -1;
  }

  for (int i = 0; i &amp;lt; sizeof(code)/sizeof(code[0]); i++) {
    *((unsigned short *)m+i) = (unsigned short)(((code[i]&amp;gt;&amp;gt;8) | (code[i]&amp;lt;&amp;lt;8)) &amp;amp; 0xffff);
  }

  ((void (*)())m)();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/kokster/writing-a-jit-compiler-in-golang-964b61295f&#34;&gt;https://medium.com/kokster/writing-a-jit-compiler-in-golang-964b61295f&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记一次mongo数据库优化经历</title>
      <link>http://zjykzk.github.io/post/cs/first-optimal/</link>
      <pubDate>Tue, 24 Oct 2017 18:46:11 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/first-optimal/</guid>
      <description>

&lt;h1 id=&#34;缘起&#34;&gt;缘起&lt;/h1&gt;

&lt;p&gt;最近，做一个项目：封装一个MQ，提供发送、拉取、查询的基本功能，需要保证一条消息只被消费一次。写完了基本功能以后，开始做benchmark。结果超级糟糕：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;发送线程数量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;消费线程数量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;发送TPS&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;消费TPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;200-400&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20-60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;而且，随着消费线程的数量增加发送&amp;amp;消费的TPS都下降。&lt;/p&gt;

&lt;h1 id=&#34;排查&#34;&gt;排查&lt;/h1&gt;

&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;

&lt;p&gt;一次发送涉及的数据库操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一次topic查询&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一次跟MQ之间的RPC&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一次写统计数据&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一次消费涉及的数据库操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;两次cas操作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;两次写统计操作&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;系统状态&#34;&gt;系统状态&lt;/h2&gt;

&lt;h3 id=&#34;磁盘io&#34;&gt;磁盘IO&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;iotop&lt;/code&gt; 发现：mongodb写磁盘速度最大2M/s。&lt;/p&gt;

&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;nethogs&lt;/code&gt; 发现：mongodb的通信速度最大200+KB/s。&lt;/p&gt;

&lt;h3 id=&#34;系统总体情况&#34;&gt;系统总体情况&lt;/h3&gt;

&lt;p&gt;通过命令&lt;code&gt;vmstat&lt;/code&gt;发现：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;系统和用户的CPU使用率都超低，两者加起来不到5%，系统的中断和上下文切换非常高，特别是上下文切换，达到了十几万/s&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;从缓存写到磁盘的io比较高好几百/s&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内存使用率非常低&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;

&lt;p&gt;问题一定是使用mongodb上面。&lt;/p&gt;

&lt;h2 id=&#34;排查-1&#34;&gt;排查&lt;/h2&gt;

&lt;h3 id=&#34;profile程序&#34;&gt;profile程序&lt;/h3&gt;

&lt;p&gt;通过golang自带的profile功能，在程序里面添加profile代码，通过&lt;code&gt;go tool pprof&lt;/code&gt;对程序做profile，用 &lt;code&gt;go-torch&lt;/code&gt;生成火焰图。发现果不其然，一个请求过程中，数据操作耗时占整体的40%以上。&lt;/p&gt;

&lt;p&gt;发送消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/create.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;拉取消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/pull.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;确认消息火焰图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/finish.job.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过看程序以及对需求的分析，程序可以做优化：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;统计数据可以不用每次都去写数据库，把它放在内存或者写本地磁盘，定期刷到数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;去重以后的消息，可以放在内存，减少拉取消息时候一次cas操作&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb&#34;&gt;mongodb&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code&gt;mongostat&lt;/code&gt; 查看mongodb的运行状态，发现随着消费线程并发的提高锁的百分比越来越高最后超过的90%。查看mongodb的版本是2.4.9，它用的数据库锁。换个mongodb版本，避免锁的开销，通过了解公司线上使用的版本3.0.15，并使用wireTiger存储引擎。果断按照这个环境进行benchmark，结果仍然不尽任意。查看&lt;strong&gt;profiler&lt;/strong&gt;，一个类似mysql的慢查询的命令。通过以下命令加上专家的讲解，从&lt;strong&gt;信息 nscannedObjects : 71040&lt;/strong&gt;，发现扫描对象比较多，从代码确认是缺少了一个索引。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.setProfilingLevel(2);
{&amp;quot;was&amp;quot; : 0 , &amp;quot;slowms&amp;quot; : 100, &amp;quot;ok&amp;quot; : 1}       // &amp;quot;was&amp;quot; 表示旧的设置
&amp;gt; db.system.profile.find().sort({millis:-1}) // 列出耗时的操作，按照操作耗时排序，这条语句会列出扫描的对象数量，锁等关键信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在程序里面加上索引，再次benchmark达到预期。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本次调优最大问题是思维盲区，由于自己对mongodb不熟悉，就没有想到去profile mongodb，把精力放在了优化代码层面的数据库操作，中间还做过把消息放在缓存中虽然达到预期，但是有数据不一致的问题。其实，方法没对，&lt;strong&gt;优化的首要原则是做profile，profile一切。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>map 内部实现</title>
      <link>http://zjykzk.github.io/post/cs/golang/map/</link>
      <pubDate>Thu, 15 Jun 2017 19:13:25 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/golang/map/</guid>
      <description>

&lt;h1 id=&#34;类型&#34;&gt;类型&lt;/h1&gt;

&lt;p&gt;golang中的map是一个 &lt;strong&gt;指针&lt;/strong&gt;。当执行语句 &lt;code&gt;make(map[string]string)&lt;/code&gt; 的时候，其实是调用了 &lt;code&gt;makemap&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// file: runtime/hashmap.go:L222
func makemap(t *maptype, hint64, h *hmap, bucket unsafe.Pointer) *hmap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然，&lt;code&gt;makemap&lt;/code&gt; 返回的是指针。&lt;/p&gt;

&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;

&lt;h2 id=&#34;hashmap&#34;&gt;hashmap&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// hash map
type hmap struct {
    // 元素的个数 == len()返回的值，必须放在第一个位置因为 len函数需要使用
    count     int

    // map标记:
    // 1. key和value是否包指针
    // 2. 是否正在扩容
    // 3. 是否是同样大小的扩容
    // 4. 是否正在 `range`方式访问当前的buckets
    // 5. 是否有 `range`方式访问旧的bucket
    flags     uint8
    B         uint8  // log_2(B) == bucket数量
    noverflow uint16 // overflow bucket的数量，是个近似值
    hash0     uint32 // hash种子

    buckets    unsafe.Pointer // bucket slice指针，如果count == 0，这里的值为 nil
    oldbuckets unsafe.Pointer // bucket slice指针，仅当在扩容的时候不为nil
    nevacuate  uintptr        // 扩容时已经移到新的map中的bucket数量

    // 当key和value的类型不包含指针的时候，key和value就会做inline处理(怎么处理的)
    // 保证overflow的bucket活着，不被gc回收
    overflow *[2]*[]*bmap
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bucket&#34;&gt;bucket&lt;/h2&gt;

&lt;p&gt;每个bucket固定包含8个key和value。实现上面是一个固定的大小连续内存块，分成四部分：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个条目的状态&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8个key值&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8个value值&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;指向下个bucket的指针&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;数据结构定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// bucket
type bmap struct {
        // 每个条目的状态，tophash[0]表示当前bucket中的条目是否已经完全移到新的bucket中去了
        tophash [bucketCnt]uint8
        // keys
        // values
        // Followed by an overflow pointer.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;条目状态&#34;&gt;条目状态&lt;/h3&gt;

&lt;p&gt;. &lt;code&gt;0&lt;/code&gt; 空，可以被使用&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;1&lt;/code&gt; 空，bucket中的内容已经被移到了新的bucket中&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;2&lt;/code&gt; 该条目已经被移到了新的bucket，该bucket的位置在处在前半部分&lt;/p&gt;

&lt;p&gt;. &lt;code&gt;3&lt;/code&gt; 该条目已经被移到了新的bucket，该bucket的位置在处在后半部分&lt;/p&gt;

&lt;p&gt;. 其他大于等于&lt;code&gt;4&lt;/code&gt; 的值，来自key的hash值的最高8位，如果高8位值小于4，则加4&lt;/p&gt;

&lt;h4 id=&#34;第一个条目状态&#34;&gt;第一个条目状态&lt;/h4&gt;

&lt;p&gt;bucket的第一个条目&lt;code&gt;tophash[0]&lt;/code&gt; 用来标识bucket中的条目是否已经全部被移到了新的bucket中去了， &lt;code&gt;1-3&lt;/code&gt; 表示已经移动完。&lt;/p&gt;

&lt;h3 id=&#34;内存布局&#34;&gt;内存布局&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;   ----+-----------------+ -.
   ^   |     bucket0     |  |------&amp;gt; +------------+
   |   +-----------------+ -&#39;        | tophash0-7 |
2^h.B  |     .......     |           +------------+
   |   +-----------------+           |   key0-7   |
   v   | bucket2^h.B - 1 |           +------------+
   ----+-----------------+           |  value0-7  |
                                     +------------+ -.
                                     |overflow_ptr|  |-----&amp;gt; new bucket address
                                     +------------+ -&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择这样的布局的好处：由于对齐的原因，&lt;em&gt;key0/value0/key1/value1&amp;hellip;&lt;/em&gt; 这样的形式可能需要更多的补齐空间，比如 &lt;code&gt;map[int64]int8&lt;/code&gt; ，1字节的value后面需要补齐7个字节才能保证下一个key是 &lt;code&gt;int64&lt;/code&gt; 对齐的。&lt;/p&gt;

&lt;h2 id=&#34;装载因子&#34;&gt;装载因子&lt;/h2&gt;

&lt;p&gt;装载因子决定map的资源使用率以及性能高低，在实现map时，考虑四个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;%overflow：拥有overflow的bucket的百分比&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;bytes/entry: 每个key/value的额外开销&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;hitprobe: 查找存在的key时需要检查的条目数量&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;missprobe: 查找不存在的key是需要检查的条目数量&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其测试数据如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;装载因子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;%overflow&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;bytes/entry&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;hitprobe&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;missprobe&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20.90&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.79&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;hash函数&#34;&gt;hash函数&lt;/h1&gt;

&lt;p&gt;map中的key对应着一个hash函数，用于定位bucket。在golang的hash函数是固定的，用户无法修改。golang中的预定义基本类型，像 &lt;code&gt;int32/int64/string/interface&lt;/code&gt; 等等都有一个hash函数与之对应，代码在runtime/alg.go中。对于struct/数组/slice，如果它每个字段或者元素都是有hash函数，那么该类型就有hash函数，hash值由每个字段的hash值来定义，代码在reflect/type.go函数&lt;code&gt;StructOf&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;注：&lt;code&gt;map&lt;/code&gt;是不能作为key的。&lt;/p&gt;

&lt;h1 id=&#34;扩容&#34;&gt;扩容&lt;/h1&gt;

&lt;p&gt;当进行添加元素的操作时，如果超过装载因子，或者overflow的bucket数量超出阈值，就会触发扩容的操作。如果是因为overflow的bucket数量过多引起的，map的容量不会扩大，不然就扩大为原来的大小的两倍。&lt;/p&gt;

&lt;p&gt;在实现扩容的时候，会先为需要的bucket分配新内存，然后把旧的bucket保存起来，再把旧的内容移到新的bucket中去。&lt;/p&gt;

&lt;h1 id=&#34;线程安全&#34;&gt;线程安全&lt;/h1&gt;

&lt;p&gt;map是线程不安全的。但是在实现中有很多关于并发访问的代码，比如&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在迭代的时候会做是否正在扩容&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;添加数据的时候是否有其他数据正在写，有的话会panic&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;既然不是线程安全，为啥要做这样的检查，不检查的话可以简化代码提高性能。检查的好处就是告知提醒用户并发访问了map，但是这个检查也不是百分之一百的检测到所有的并发访问。&lt;/p&gt;

&lt;h1 id=&#34;键值nan&#34;&gt;键值NaN&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; 的hash值是随机(&lt;a href=&#34;https://research.swtch.com/randhash&#34;&gt;原因&lt;/a&gt;)，也就是说每次计算hash值都有可能是不一样的。这个跟python/java等其他语言有比较大的差别。&lt;/p&gt;

&lt;p&gt;正是因为这样有了以下几个有趣的事情：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当 &lt;code&gt;NaN&lt;/code&gt; 作为key的时候，为了保持hash值的不变性，利用 &lt;code&gt;tophash&lt;/code&gt; 的最低位来判断是放在扩容以后bucket的上半部份还是下半部分&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;NaN&lt;/code&gt; 做key取数据时永远也取不到，用 &lt;code&gt;for&lt;/code&gt; 迭代map是唯一一种访问 key为&lt;code&gt;NaN&lt;/code&gt; 的内容的方式&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;迭代&#34;&gt;迭代&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 语句迭代map，在会调用函数 &lt;code&gt;mapiterinit&lt;/code&gt; 做初始化工作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;随机挑选一个起始位置开始迭代：a. bucket随机选一个，b. bucket中的起始条目也是随机的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;初始化overflow，目的是为了防止那些内联的数据被gc，导致迭代失败&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每次获取一个元素的时候调用函数&lt;code&gt;mapiternext&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>补码</title>
      <link>http://zjykzk.github.io/post/cs/complement/</link>
      <pubDate>Tue, 30 May 2017 23:18:02 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/complement/</guid>
      <description>

&lt;h2 id=&#34;加法&#34;&gt;加法&lt;/h2&gt;

&lt;p&gt;2个十进制数字的非正式算法：两个数字中相同位置的数相加，如果结果超过10产生进位，该进位在下一位数相加时加上。直到两个数字的所有位数都加完为止。&lt;/p&gt;

&lt;p&gt;考虑十进制的2位数加法，例如：16 + 26。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 6
  + 2 6
 -------
    4 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上例中的加法过程是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;6+6&lt;/code&gt; 得2，产生进位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 2 + 1&lt;/code&gt; 的4，其中最后加1是&lt;code&gt;1&lt;/code&gt;步骤的几位，最终结果是 &lt;code&gt;42&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;减法&#34;&gt;减法&lt;/h2&gt;

&lt;p&gt;2个10进制数字的非正式算法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果被减数大于等于减数，两个数字中相同位置的数相减，如果被减数小于减数，从高位借一位，轮到高位计算时要多减去一个1。直到两个数字的所有位都减完为止。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果被减数小于减数，交互减数与被减数的位置进行 &lt;code&gt;1&lt;/code&gt; 操作，把结果加一个负号&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;考虑十进制的2位数减法，例如：16 - 25。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 6
  + 2 5
 -------
    - 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上例中的加法过程是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;16&lt;/code&gt; 比&lt;code&gt;25&lt;/code&gt;小，交换两个数的位置&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;比 &lt;code&gt;6&lt;/code&gt; 小产生借位， &lt;code&gt;15-6&lt;/code&gt; 得到 &lt;code&gt;9&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2-1-1&lt;/code&gt; 得到0，最后一个 &lt;code&gt;1&lt;/code&gt;是借位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;加上负号，最终的结果是 &lt;code&gt;-9&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;补码&#34;&gt;补码&lt;/h2&gt;

&lt;p&gt;加法需要记录进位，而减法需要记录借位，比较大小，记录符号。这样减法的复杂度就要比较加法高。&lt;/p&gt;

&lt;h3 id=&#34;减法变加法&#34;&gt;减法变加法&lt;/h3&gt;

&lt;p&gt;注意到&lt;code&gt;16-25=16+(-25)&lt;/code&gt;，如果&lt;code&gt;-25&lt;/code&gt;能够表示成一个正数，那么减法就变成了加法。&lt;/p&gt;

&lt;p&gt;2位10进制的整数范围0-99，取一半用来做正数和零，一半做负数，分布如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 - 0
1 - 1
...
49 - 49
50 - -50
51 - -49
...
99 - -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照这个分布，&lt;code&gt;-25&lt;/code&gt;对应着&lt;code&gt;75&lt;/code&gt;，从而得到&lt;code&gt;16-25=16+75=91&lt;/code&gt;，再根据上面的正负数的分布&lt;code&gt;91&lt;/code&gt;就是&lt;code&gt;-9&lt;/code&gt;，完全与&lt;code&gt;16-25=-9&lt;/code&gt;吻合。&lt;/p&gt;

&lt;p&gt;另外，如果两个数和超过100，只需要减去100就是对应的结果。&lt;/p&gt;

&lt;p&gt;这种用正数表示负数的编码方式叫做补码。由于每个负数正好是100减去表示这个负数的正数，所以叫10的补码。而在二进制情况下，就叫2的补码。因为，二进制下10表示十进制的2.&lt;/p&gt;

&lt;h3 id=&#34;二进制版本&#34;&gt;二进制版本&lt;/h3&gt;

&lt;p&gt;一个6位数的二进制版本，正负数编码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000000 - 000000
000001 - 000001
...
011111 - 011111
100000 - -100000
...
111111 - -000001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;16&lt;/code&gt;的二进制&lt;code&gt;010000&lt;/code&gt;，&lt;code&gt;-25&lt;/code&gt;的二进制&lt;code&gt;100110&lt;/code&gt;，&lt;code&gt;16-15=&amp;gt;010000+100110=110110=&amp;gt;-9&lt;/code&gt;。注意到&lt;code&gt;25&lt;/code&gt;的二进制是&lt;code&gt;011001&lt;/code&gt;，而&lt;code&gt;-25&lt;/code&gt;的二进制&lt;code&gt;100110=1000000-011011=111111-011001+000001&lt;/code&gt;，恰好是对&lt;code&gt;011001&lt;/code&gt;取反加1。&lt;/p&gt;

&lt;p&gt;同时，二进制转化成十进制：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;111111 = -(1000000 - 111111)
       = -(2^6 - 2^5 - 2^4 - 2^3 - 2^2 - 2^1 - 2^0)
       = -(2^5 - 2^4 - 2^3 - 2^2 - 2^1 - 2^0)
       = -2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0
011111 = 2^4 + 2^3 + 2^2 + 2^1 + 2^0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最高位的转化取负数，其他会取正数，然后求和正好是十进制的数。&lt;/p&gt;

&lt;p&gt;这个结果对计算机来说非常有价值，因为计算机组件有一些逻辑门构成，而逻辑门只能处理真假两个值，这正好可以用01来表示，取反，加1都能很方便的用逻辑门来实现，达到了加法和减法统一，简化逻辑电路的设计。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GO 内存模型</title>
      <link>http://zjykzk.github.io/post/cs/golang/go-memory-model/</link>
      <pubDate>Tue, 28 Mar 2017 11:22:09 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/golang/go-memory-model/</guid>
      <description>

&lt;p&gt;内存模型定义了一系列的条件，在这些条件下，多个goroutine对一个变量进行读写，保证一个goroutine读取到的值是是另外一个goroutine写入的某个值。&lt;/p&gt;

&lt;h2 id=&#34;happens-before&#34;&gt;Happens Before&lt;/h2&gt;

&lt;p&gt;编译器会对程序做优化，比如指令重排。在go语言中规定，在同一个goroutine里面，程序表达的顺序就是读写的顺序。但是，多个goroutine执行同样的代码时，就会出现读写顺序不一样的情况。例如，代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;int a = 0;
int b = 1;
print(a);
print(b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在编译器的优化下，代码的执行顺序有可能变成下面这样的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;int a = 0;
print(a);
int b = 1;
print(b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，多个goroutine执行时，就无法保证打印*a*的时候，*b*的值一定是1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;happens before&lt;/strong&gt;定义了内存操作的顺序，它是一种偏序。&lt;em&gt;e1&lt;/em&gt; happens before &lt;em&gt;e2&lt;/em&gt;, &lt;em&gt;e2&lt;/em&gt; happens after &lt;em&gt;e1&lt;/em&gt; 。如果 &lt;em&gt;e1&lt;/em&gt; 既不happens before &lt;em&gt;e2&lt;/em&gt; 也不happens after &lt;em&gt;e2&lt;/em&gt; ，那么 &lt;em&gt;e1&lt;/em&gt; 和 &lt;em&gt;e2&lt;/em&gt; 是并发执行的。它有传递的性质（自反性，对称性就不考虑了）。这个关系就决定了共享变量在某个上下文下面读写顺序，那么它的具体值变化也就确定了。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在一个goroutine中，happens before的顺序就是代码表达的顺序。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;共享变量 &lt;em&gt;v&lt;/em&gt; 的读操作 &lt;em&gt;r&lt;/em&gt; ，能够读到是另一个对变量 &lt;em&gt;v&lt;/em&gt; 写操作 &lt;em&gt;w&lt;/em&gt; 写入的值的条件是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;w&lt;/em&gt; happens before &lt;em&gt;r&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;没有其他的对变量 &lt;em&gt;v&lt;/em&gt; 写操作happens before &lt;em&gt;r&lt;/em&gt; 并且happens after &lt;em&gt;w&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两个条件并不能保证有一个与 &lt;em&gt;r&amp;amp;w&lt;/em&gt; 没有任何happens before关系的对共享变量 &lt;em&gt;v&lt;/em&gt; 写操作 &lt;em&gt;w&amp;rsquo;&lt;/em&gt; 的存在，导致 &lt;em&gt;r&lt;/em&gt; 读到的是 &lt;em&gt;w&amp;rsquo;&lt;/em&gt; 的结果。所以，保证 &lt;em&gt;r&lt;/em&gt; 的结果是 &lt;em&gt;w&lt;/em&gt; 的值的条件是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;w&lt;/em&gt; happens before &lt;em&gt;r&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;w&lt;/em&gt; 和 &lt;em&gt;r&lt;/em&gt; 之间没有任何写操作，也就是说其他的写操作要么happens before &lt;em&gt;w&lt;/em&gt; ，要么happens after &lt;em&gt;r&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在只有一个goroutine中1和2是等价的。 &lt;em&gt;r&lt;/em&gt; 的结果一定是最近一次 &lt;em&gt;w&lt;/em&gt; 的结果。&lt;strong&gt;如果多个goroutine访问共享变量，就会产生竞争，必须要通过同步机制建立happens before关系才能确定共享变量的值&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;另外，1) 变量自动的初始化为其类型对应的0时，相当于是一个写操作，也会产生竞争；2) 对多个机器字进行读写的时候，哪个字先读写是不确定的。&lt;/p&gt;

&lt;h2 id=&#34;同步机制&#34;&gt;同步机制&lt;/h2&gt;

&lt;h3 id=&#34;初始化&#34;&gt;初始化&lt;/h3&gt;

&lt;p&gt;程序的初始化是通过一个goroutine执行的，这个goroutine会生成一个新的goroutine，因此会有竞争存在。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;包 &lt;em&gt;p&lt;/em&gt; 依赖 *q*，&lt;em&gt;q&lt;/em&gt; 的 &lt;em&gt;init&lt;/em&gt; 函数happens before包 &lt;em&gt;p&lt;/em&gt; 的任何操作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;所有 &lt;em&gt;init&lt;/em&gt; 函数执行结束happens before &lt;em&gt;main.main&lt;/em&gt; 函数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;goroutine-创建&#34;&gt;Goroutine 创建&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;go&lt;/em&gt; 语句happens before新创建的goroutine的运行。以下代码中，&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt; happens before &lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt; happens before 函数&lt;strong&gt;&lt;em&gt;f&lt;/em&gt;&lt;/strong&gt;的执行，在将来的某个时刻所以打印 &lt;code&gt;hello, world&lt;/code&gt;（可能是在hello函数返回之后）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var a string

func f() {
	print(a)
}

func hello() {
	a = &amp;quot;hello, world&amp;quot; // 1
	go f()             // 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;goroutine-销毁&#34;&gt;Goroutine 销毁&lt;/h3&gt;

&lt;p&gt;goroutine的退出跟其他的操作没有任何的happens before操作。以下代码无法保证&lt;strong&gt;&lt;em&gt;print(a)&lt;/em&gt;&lt;/strong&gt;的结果就是 &lt;code&gt;hello, world&lt;/code&gt;。事实上，编译器完全有可能把 &lt;em&gt;go&lt;/em&gt; 语句完全的删除掉。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var a string

func hello() {
	go func() { a = &amp;quot;hello&amp;quot; }()
	print(a)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;channel通信&#34;&gt;Channel通信&lt;/h3&gt;

&lt;p&gt;channel在golang里面是同步的一个重要手段。channel上面的每个发送操作，都唯一对应着一个channel上面的接受操作，显然发送／接受操作在不同的goroutine下面才需要讨论。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在一个channel上面的发送操作的完成happens before想对应的接受操作的完成。&lt;/strong&gt;以下代码中，按照本规则 &lt;em&gt;1&lt;/em&gt; happens before &lt;em&gt;2&lt;/em&gt; ，另外，因为 &lt;em&gt;2&lt;/em&gt; 和 &lt;em&gt;3&lt;/em&gt; 在同一个goroutine中执行， &lt;em&gt;2&lt;/em&gt; happens before &lt;em&gt;3&lt;/em&gt; ，所以能够打印出 &lt;code&gt;hello, world&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var c = make(chan int, 10)
var a string

func f() {
	a = &amp;quot;hello, world&amp;quot;
	c &amp;lt;- 0       // 1
}

func main() {
	go f()
	&amp;lt;-c          // 2
	print(a)     // 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;channel的关闭操作happens before因为关闭channel读到的0值。&lt;/strong&gt;上面例子中，用 &lt;em&gt;close( c)&lt;/em&gt; 代替 &lt;em&gt;ch &amp;lt;- 0&lt;/em&gt; 同样能够保证 &lt;em&gt;1&lt;/em&gt;  happens before &lt;em&gt;2&lt;/em&gt;  。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;没有缓冲的channel上面的接受操作happens before发送操作。也就是说，发送操作只有在channel上面进行的接受操作结束以后才返回。&lt;/strong&gt;以下代码中，根据本规则 &lt;em&gt;1&lt;/em&gt; happens before &lt;em&gt;2&lt;/em&gt; 。另外，因为 &lt;em&gt;2&lt;/em&gt; 和 &lt;em&gt;3&lt;/em&gt; 在同一个goroutine中执行， &lt;em&gt;2&lt;/em&gt; happens before &lt;em&gt;3&lt;/em&gt; ，所以能够打印出 &lt;code&gt;hello, world&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var c = make(chan int)
var a string

func f() {
	a = &amp;quot;hello, world&amp;quot;
	&amp;lt;-c	                 // 1
}

func main() {
	go f()
	c &amp;lt;- 0               // 2
	print(a)             // 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;如果一个channel有 &lt;em&gt;C&lt;/em&gt; 容量的缓冲，第 &lt;em&gt;k&lt;/em&gt; 个接受操作happens before第 &lt;em&gt;k+C&lt;/em&gt; 个发送操作。&lt;/strong&gt;根据这个规则可以用带缓冲的channel来模拟信号量。以下程序就保证了，同时最多只有3个goroutine同时执行 &lt;em&gt;w&lt;/em&gt; 函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var limit = make(chan int, 3)

func main() {
	for _, w := range work {
		go func(w func()) {
			limit &amp;lt;- 1
			w()
			&amp;lt;-limit
		}(w)
	}
	select{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;locks&#34;&gt;Locks&lt;/h3&gt;

&lt;p&gt;包 &lt;em&gt;sync&lt;/em&gt; 实现了两类锁分别是： &lt;em&gt;sync.Mutex&lt;/em&gt; 和 &lt;em&gt;sync.RWMutex。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;给定类型为 &lt;em&gt;sync.Mutex&lt;/em&gt; 或者是 &lt;em&gt;sync.RWMutex&lt;/em&gt; 的变量 &lt;em&gt;l&lt;/em&gt; ,以及满足 &lt;em&gt;n&amp;lt;m&lt;/em&gt; 条件的整数。调用 &lt;em&gt;n&lt;/em&gt; 次 &lt;em&gt;l.Unlock()&lt;/em&gt;  happens before 调用 &lt;em&gt;m&lt;/em&gt; 次 &lt;em&gt;l.Lock()&lt;/em&gt; （返回）。&lt;/strong&gt;以下代码中，根据本规则 &lt;em&gt;1&lt;/em&gt; happens before &lt;em&gt;2&lt;/em&gt; ，另外，因为 &lt;em&gt;2&lt;/em&gt; 和 &lt;em&gt;3&lt;/em&gt; 在同一个goroutine中执行， &lt;em&gt;2&lt;/em&gt; happens before &lt;em&gt;3&lt;/em&gt; ，所以能够打印出 &lt;code&gt;hello, world&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var l sync.Mutex
var a string

func f() {
	a = &amp;quot;hello, world&amp;quot;
	l.Unlock()       // 1
}

func main() {
	l.Lock()
	go f()
	l.Lock()         // 2
	print(a)         // 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;对于 &lt;em&gt;sync.RWMutex&lt;/em&gt; 类型的变量l，存在一个整数 &lt;em&gt;n&lt;/em&gt; ， &lt;em&gt;l.RLock&lt;/em&gt; 的调用happens after(返回)调用 &lt;em&gt;n&lt;/em&gt; 次 &lt;em&gt;l.Unlock&lt;/em&gt; ，与这个 &lt;em&gt;l.RLock&lt;/em&gt; 想对应的 &lt;em&gt;l.RUnlock&lt;/em&gt; happens before 第 &lt;em&gt;n+1&lt;/em&gt; 的 &lt;em&gt;l.Lock&lt;/em&gt; 。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;once&#34;&gt;Once&lt;/h3&gt;

&lt;p&gt;Once提供了保证某段代码只执行一次的机制。对某个函数 &lt;em&gt;f&lt;/em&gt; ， &lt;em&gt;once.Do(f)&lt;/em&gt; 调用保证了 &lt;em&gt;f&lt;/em&gt; 只被执行一次，如果有多个goroutine执行 &lt;em&gt;once.Do(f)&lt;/em&gt; ，其中一个执行了，其他就等待直到f执行完毕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;调用 &lt;em&gt;once.Do(f)&lt;/em&gt; 中 &lt;em&gt;f&lt;/em&gt; (返回)happens before 其他 &lt;em&gt;once.Do(f)&lt;/em&gt; 调用完成。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;为了更有效率的执行程序，编译器，CPU都会一某种方式进行优化。当程序是并发执行的时候，内存的数据就变得无法根据程序代码判断内存中的值。内存模型的作用就是在程序的层面规定内存的操作顺序，以达到确定内存值的目的。而happens before是一个定义这个操作顺序的规范。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://zjykzk.github.io/post/cs/str/</link>
      <pubDate>Thu, 19 Jan 2017 14:05:14 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/str/</guid>
      <description>

&lt;h1 id=&#34;为什么要字符&#34;&gt;为什么要字符&lt;/h1&gt;

&lt;p&gt;人类发明了文字，同时想用计算机来处理文字。由此，就产生了字符。每个字符代码一个文字的图形。&lt;/p&gt;

&lt;h1 id=&#34;字符串的表示&#34;&gt;字符串的表示&lt;/h1&gt;

&lt;p&gt;在计算机内部，只有01的信息。因此，为了能让计算机能够认识字符串，每个字符就的被映射成01数据。这个映射功能就叫编码。&lt;/p&gt;

&lt;h2 id=&#34;ascii&#34;&gt;ASCII&lt;/h2&gt;

&lt;p&gt;ASCII是美国19世纪60年代发明的一种编码，总共规定了128个字符，每个字符有1个字节大小。范围从0-127，比如&lt;code&gt;A&lt;/code&gt;的编码是&lt;code&gt;01000001&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;unicode&#34;&gt;Unicode&lt;/h2&gt;

&lt;p&gt;世界语言文字异常丰富，每个国家都有自己独特的语言文字。ASCII的编码无法编码所有的文字，因此产生了很多编码，比如中文的BIG5，GB2312等等。这些编码无法兼容，比如&lt;code&gt;中&lt;/code&gt;在GB2312编码是&lt;code&gt;1101011011010000&lt;/code&gt;，BIG5的编码是&lt;code&gt;1010010010100100&lt;/code&gt;。因此，Unicode就出现了。Unicode规定了每个字符的唯一编号，目前已经有100多万个字符。需要注意的是Unicode只规定了字符的编号，没有规定二进制的表示。&lt;/p&gt;

&lt;h2 id=&#34;utf8编码&#34;&gt;Utf8编码&lt;/h2&gt;

&lt;p&gt;utf8是Ken Thompson于1992年创建，现在已经标准化为RFC 3629。是目前使用最为广泛的unicode编码方式，其他的有utf-16，utf-32。它的特点是变长的，使用1-4个字节表示一个字符，不同的符号有不同的长度。&lt;/p&gt;

&lt;p&gt;utf8编码规则：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1. 一个字节的编码，最高位为0，其他的位表示unicode编号
  2. n个字节的编码（n&amp;gt;1），第一个字节的n位都是1，第n+1位是0，后面的每个字节的最高两位都是10，其余的位用来表示unicode编号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下表表示了utf8的编码，z表示用于编码的bit&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;unicode范围&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;utf8编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;十六进制表示&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;二进制表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000000 - 00007F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0zzzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000080 - 0007FF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;110zzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;000800 - 00D7FF/00E000 - 00FFFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1110zzzz 10zzzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;010000 - 10FFFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;11110zzz 10zzzzzz 10zzzzzz 10zzzzzz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;环境中的编码&#34;&gt;环境中的编码&lt;/h1&gt;

&lt;p&gt;一个程序读取字符的输入的时候，读取的是二进制的数据。如果程序需要理解这个字符串是什么意思，必须了解字符的编码。同理，程序输出字符串的时候必须告知字符串的编码，不然使用者就无法理解程序的输出。程序中遇到乱码的问题，都是因为一个程序输出的字符串的编码和另一个程序接受字符串时使用的编码不一致导致的。因此，在解决编码的问题的思路就是搞清楚涉及到了哪几个环境。&lt;/p&gt;

&lt;p&gt;比如：一个程序打印一个字符串到终端。程序的编码是utf8，终端显示的编码是gbk。这样就会造成乱码。&lt;/p&gt;

&lt;h1 id=&#34;不同语言的字符串的支持&#34;&gt;不同语言的字符串的支持&lt;/h1&gt;

&lt;h2 id=&#34;python-中的字符串&#34;&gt;python 中的字符串&lt;/h2&gt;

&lt;h3 id=&#34;python-2&#34;&gt;python 2&lt;/h3&gt;

&lt;h4 id=&#34;字符类型&#34;&gt;字符类型&lt;/h4&gt;

&lt;p&gt;分为byte字符串(str)和unicode(unicode)，前者的内容是字节，后者的内容是unicode中的编号。默认的是byte字符串。&lt;/p&gt;

&lt;h4 id=&#34;重要方法&#34;&gt;重要方法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# &amp;lt;type &#39;str&#39;&amp;gt; to &amp;lt;type &#39;unicode&#39;&amp;gt;
# 如果 s 是&#39;unicode&#39;类型，python会先通过encode函数把s转换成&#39;str&#39;类型
# encode函数的encoding是sys.getdefaultencoding()的值
s.decode(encoding)

# &amp;lt;type &#39;unicode&#39;&amp;gt; to &amp;lt;type &#39;str&#39;&amp;gt;
# 如果u是&#39;str&#39;类型，python会通过decode函数把u转换成&#39;unicode&#39;类型
# decode函数的encoding是sys.getdefaultencoding()的值
u.encode(encoding)

# 获取系统默认的编码
sys.getdefaultencoding()

# 修改系统的默认编码
sys.setdefaultencoding(encoding)

# 修改代码
import sys
reload(sys) # 因为python初始化的时候会把setdefaultencoding方法给删除掉
sys.setdefaultencoding(&#39;utf8&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;codecs&#34;&gt;codecs&lt;/h4&gt;

&lt;p&gt;指定encoding参数生成file-object-like对象，利用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;函数 &lt;code&gt;read&lt;/code&gt; 读取byte字符串，按照encoding的编码返回unicode&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt; 输入unicode，按照encoding的编码转换成byte字符串写入文件&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;python-3&#34;&gt;python 3&lt;/h3&gt;

&lt;p&gt;显然，python2中的字符串处理方式会变得复杂，因此在python3中字符串统一都是unicode。&lt;/p&gt;

&lt;h2 id=&#34;go中的字符串&#34;&gt;go中的字符串&lt;/h2&gt;

&lt;p&gt;go中有两种类型支持字符串分别是：&lt;code&gt;string&lt;/code&gt; 和 &lt;code&gt;rune&lt;/code&gt; 。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;string表示字节slice（分片）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rune表示unicode的编码（code point）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;go对utf8有天然的支持。go的源代码是utf8编码，&lt;code&gt;for ... range&lt;/code&gt; 循环字符串的时候也是按照utf8编码来处理每个字符，而不是字节。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://zjykzk.github.io/post/cs/prometheus/</link>
      <pubDate>Sun, 09 Oct 2016 14:45:21 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/prometheus/</guid>
      <description>

&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/promutheus.arch.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;h3 id=&#34;数据模型&#34;&gt;数据模型&lt;/h3&gt;

&lt;p&gt;prometheus把数据当作时间序列进行存储。&lt;br /&gt;
每个时间序列通过 &lt;strong&gt;metric name&lt;/strong&gt;和 &lt;strong&gt;key-value pairs&lt;/strong&gt;(也叫做 &lt;strong&gt;label&lt;/strong&gt;)标识。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;metric name&lt;/strong&gt;表示需要进行测量的系统指标。&lt;br /&gt;
它允许包含ASCII字母，数字，下划线和分号。&lt;br /&gt;
正则表示为：[a-zA-Z&lt;em&gt;:][a-zA-Z0-9&lt;/em&gt;:]*。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;label&lt;/strong&gt;表示一个系统指标的维度，可以按照这个维度进行查询统计。&lt;br /&gt;
Label名字允许包含ASCII字母，数字以及下划线。&lt;br /&gt;
正则表示为：[a-zA-Z&lt;em&gt;][a-zA-Z0-9&lt;/em&gt;]*。同时，“__”开头的名字系统保留的。&lt;br /&gt;
Label值允许任意的Unicode字符&lt;/p&gt;

&lt;h3 id=&#34;度量类型&#34;&gt;度量类型&lt;/h3&gt;

&lt;h4 id=&#34;counter&#34;&gt;Counter&lt;/h4&gt;

&lt;p&gt;累计统计度量的单个值。适用于只增不减度量，比如累计请求数量。&lt;/p&gt;

&lt;h4 id=&#34;gauge&#34;&gt;Gauge&lt;/h4&gt;

&lt;p&gt;统计度量的单个值。适用于可以增减的度量，比如当前的内存使用情况。&lt;/p&gt;

&lt;h4 id=&#34;histogram&#34;&gt;Histogram&lt;/h4&gt;

&lt;p&gt;统计度量事件发生的次数以及度量值的和。还支持统计小于某个阀值的度量事件发生的次数。&lt;/p&gt;

&lt;p&gt;这个度量类型有三个时间序列统计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_bucket{le=&amp;laquo;upper inclusive bound&amp;raquo;}：小于某个阀值的度量事件发生的次数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_sum：度量值的和&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_count：度量事件发生的次数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;统计度量时间发生的次数以及度量值的和。还支持统计某个百分比内的度量事件发生的次数。&lt;/p&gt;

&lt;p&gt;这个度量类型有三个时间序列统计：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;{quantile=&amp;raquo;&amp;lt;p&amp;gt;&amp;laquo;}：度量值在前百分之p的度量事件发生的次数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_sum：度量值的和&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;base_name&amp;gt;_count：度量事件发生的次数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;job-instance&#34;&gt;Job &amp;amp; Instance&lt;/h3&gt;

&lt;p&gt;在prometheus里面对监控的对象分成Job和Instance。Instance代表一个监控的实例。比如&lt;br /&gt;
一个支付进程。Job代表一个监控的逻辑单位。&lt;br /&gt;
比如支付服务，它在多台机器上面部署着，每台机器对应一个Instance。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;job: payment-server&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;instance 1: 1.2.3.4:5678&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance 2: 1.2.3.5:5689&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance 3: 1.2.3.6:5689&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;自动生成的label和时间序列&#34;&gt;自动生成的label和时间序列&lt;/h4&gt;

&lt;p&gt;当prometheus抓取一个目标的时候，会自动生成时间序列以及label，用来标识抓取的目标状态。&lt;/p&gt;

&lt;p&gt;label:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;job: 配置好的job名字&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;instance:&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;格式的url&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;时间序列：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;up{job=&amp;raquo;&amp;lt;job-name&amp;gt;&amp;laquo;, instance=&amp;raquo;&amp;lt;host:port&amp;gt;&amp;laquo;}：1 表示监控目标活着，0表示挂了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;scrape_duration_seconds{job=&amp;raquo;&amp;lt;job-name&amp;gt;&amp;laquo;, instance=&amp;raquo;&amp;lt;host:port&amp;gt;&amp;laquo;}：抓取日志的时间&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>增加bug的编程实践</title>
      <link>http://zjykzk.github.io/post/cs/bug-op/</link>
      <pubDate>Sat, 04 Jun 2016 11:12:13 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/bug-op/</guid>
      <description>

&lt;h2 id=&#34;思路不清晰&#34;&gt;思路不清晰&lt;/h2&gt;

&lt;p&gt;思路没有完全确定情况下写代码。造成不确定的情况有多方面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 求快，把相似的需求当做一样的需求
2. 缺少设计，大体明白实现方案，就开始编码
3. 知识不充分，集中在前端的css、布局
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;怎么办？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;快是可以做到，心里不要慌就是。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 需求分析到位
2. 仔细查看现有的代码
3. 遗留代码多问老员工
4. 放下别人对你问代码时的负面情绪
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;破窗原理&#34;&gt;破窗原理&lt;/h2&gt;

&lt;p&gt;在一个代码质量差的项目里面，就很容易被一种“别人也是这样，我也就这样得了”，尤其是在你不熟悉代码的情况下。&lt;strong&gt;短期内，代码是写给自己的，维护的人是自己，长期内是给别人的，对自己好就是对别人好，还有需要执行力。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>flume</title>
      <link>http://zjykzk.github.io/post/cs/flume/</link>
      <pubDate>Sun, 27 Mar 2016 22:17:17 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/flume/</guid>
      <description>

&lt;h1 id=&#34;架构&#34;&gt;架构&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://zjykzk.github.io/imgs/flume.dot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;

&lt;h2 id=&#34;source&#34;&gt;source&lt;/h2&gt;

&lt;p&gt;数据的生成源。比如：读取一个本地文件，MQ等等。一个数据单元被封装成一个&lt;strong&gt;event&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;event&#34;&gt;event&lt;/h3&gt;

&lt;p&gt;数据单元，从&lt;strong&gt;source&lt;/strong&gt;产生，直到被序列化到存储中。&lt;strong&gt;event&lt;/strong&gt;包含*header*，*body*两个部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;header: 一个map数据，可以被&lt;strong&gt;interceptor&lt;/strong&gt;引用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;body: 一个字节序列，具体日志数据&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interceptor&#34;&gt;interceptor&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;读取一个&lt;strong&gt;event&lt;/strong&gt;在放到&lt;strong&gt;channel&lt;/strong&gt;中之前，&lt;strong&gt;event&lt;/strong&gt;可以被添加数据。比如说：采集机器的主机名称，时间戳。&lt;/p&gt;

&lt;h2 id=&#34;channel&#34;&gt;channel&lt;/h2&gt;

&lt;p&gt;数据队列，高可用的保障。&lt;strong&gt;source&lt;/strong&gt;产生的数据先放到这里，&lt;strong&gt;sink&lt;/strong&gt;接着从这里取出来放到存储当中。&lt;/p&gt;

&lt;h3 id=&#34;channel-selector&#34;&gt;channel selector&lt;/h3&gt;

&lt;p&gt;两个作用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;复制：把一个&lt;strong&gt;event&lt;/strong&gt;写到一个或者多个&lt;strong&gt;channel&lt;/strong&gt;中&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;路由：根据&lt;strong&gt;event&lt;/strong&gt;中的某个属性值，把数据写到指定的&lt;strong&gt;channel&lt;/strong&gt;中&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;sink&#34;&gt;sink&lt;/h2&gt;

&lt;p&gt;负责把&lt;strong&gt;channel&lt;/strong&gt;中的数据写入目标存储。&lt;/p&gt;

&lt;h3 id=&#34;sink-processor&#34;&gt;sink processor&lt;/h3&gt;

&lt;p&gt;选择&lt;strong&gt;sink&lt;/strong&gt;，在这里可以完成负载均衡和容错处理。&lt;/p&gt;

&lt;h3 id=&#34;event-serializer&#34;&gt;event serializer&lt;/h3&gt;

&lt;p&gt;把&lt;strong&gt;event&lt;/strong&gt;中的数据，转换成存储需要的格式。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>价值博客</title>
      <link>http://zjykzk.github.io/post/cs/friend-links/</link>
      <pubDate>Mon, 15 Feb 2016 11:19:35 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/cs/friend-links/</guid>
      <description>

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dabeaz.com/&#34;&gt;&lt;strong&gt;David Beazley&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;others&#34;&gt;Others&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mindhacks.cn/&#34;&gt;&lt;strong&gt;刘未鹏 | MIND HACKS&lt;/strong&gt;&lt;/a&gt;|&lt;a href=&#34;https://groups.google.com/group/pongba&#34;&gt;&lt;strong&gt;TopLanguage&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://groups.google.com/group/python-cn&#34;&gt;PythonCN&lt;/a&gt; | &lt;a href=&#34;http://erlang-china.org/&#34;&gt;ErlangCN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codinghorror.com/blog/&#34;&gt;&lt;strong&gt;Coding Horror&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://highscalability.com/&#34;&gt;High Scalability&lt;/a&gt; | &lt;a href=&#34;http://www.infoq.com/cn&#34;&gt;&lt;strong&gt;InfoQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;&lt;strong&gt;Reddit&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;&lt;strong&gt;Stack Overflow&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://steve-yegge.blogspot.com/&#34;&gt;Steve Yegge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ued.taobao.com/blog&#34;&gt;淘宝UED团队&lt;/a&gt; | &lt;a href=&#34;http://rdc.taobao.com/blog/dw&#34;&gt;淘宝数据仓库团队&lt;/a&gt; | &lt;a href=&#34;http://www.ginkgotek.com/&#34;&gt;&lt;strong&gt;银杏站内搜索&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fayaa.com/&#34;&gt;代码发芽网&lt;/a&gt; | &lt;a href=&#34;http://it.ju690.com/&#34;&gt;&lt;strong&gt;玩聚网&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://yishan.cc/&#34;&gt;&lt;strong&gt;移山之道&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.beijing-open-party.org/&#34;&gt;&lt;strong&gt;OpenParty@Beijing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sciam.com/&#34;&gt;Scientific American&lt;/a&gt; | &lt;a href=&#34;http://www.sciam.com/sciammind/&#34;&gt;&lt;strong&gt;Scientific American Mind&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://songshuhui.net/&#34;&gt;&lt;strong&gt;科学松鼠会&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.sfw-cd.com/&#34;&gt;科幻世界&lt;/a&gt; | &lt;a href=&#34;http://www.xingfuke.net/&#34;&gt;&lt;strong&gt;幸福课&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.yeeyan.com/&#34;&gt;&lt;strong&gt;译言&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.mifengtd.cn/&#34;&gt;褪墨&lt;/a&gt; | &lt;a href=&#34;http://www.busiphi.com/&#34;&gt;商业哲学评论&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gezhi.org/&#34;&gt;格致&lt;/a&gt; | &lt;a href=&#34;http://www.bowenwang.com.cn/&#34;&gt;博闻网&lt;/a&gt; | &lt;a href=&#34;http://www.xlxcn.net/&#34;&gt;世纪心理沙龙&lt;/a&gt; | &lt;a href=&#34;http://www.sciam.com.cn/&#34;&gt;&lt;strong&gt;环球科学&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://scienceblogs.com/neurophilosophy/&#34;&gt;&lt;strong&gt;NeuroPhilogophy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.spring.org.uk/&#34;&gt;&lt;strong&gt;PsyBlog – Understand Your Mind&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://scienceblogs.com/cognitivedaily/&#34;&gt;&lt;strong&gt;Cognitive Daily&lt;/strong&gt;&lt;/a&gt; | &lt;strong&gt;&lt;a href=&#34;http://bambooman.spaces.live.com/blog/&#34;&gt;张峥&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/alai04&#34;&gt;alai&lt;/a&gt; | &lt;a href=&#34;http://chenyufei.name/blog&#34;&gt;chenyufei&lt;/a&gt; | &lt;a href=&#34;http://cuitianyi.com/blog/&#34;&gt;dd&lt;/a&gt; | &lt;a href=&#34;http://dreamhead.blogbus.com/&#34;&gt;&lt;strong&gt;郑晔(DreamHead)&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://googollee.blog.163.com/&#34;&gt;Googol&lt;/a&gt; | &lt;a href=&#34;http://jawley.com/&#34;&gt;Jawley&lt;/a&gt; | &lt;a href=&#34;http://joyfire.spaces.live.com/&#34;&gt;Joyfire&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/lxwde&#34;&gt;lxwde&lt;/a&gt; | &lt;a href=&#34;http://www.matrix67.com/blog/&#34;&gt;&lt;strong&gt;Matrix67&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.2maomao.com/blog/&#34;&gt;&lt;strong&gt;任中方&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.cnblogs.com/riceball/&#34;&gt;RiceBall&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/roofalison/&#34;&gt;roofalison&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/soloist&#34;&gt;soloist&lt;/a&gt; | &lt;a href=&#34;http://www.tinydust.net/prog/diary/diary.htm&#34;&gt;&lt;strong&gt;郝培强(Tinyfool)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwind.cn/&#34;&gt;&lt;strong&gt;Windstorm&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blogs.sun.com/yongsun&#34;&gt;YongSun&lt;/a&gt; | &lt;a href=&#34;http://huangshujian.spaces.live.com/&#34;&gt;书剑&lt;/a&gt; | &lt;a href=&#34;http://blog.codingnow.com/&#34;&gt;&lt;strong&gt;云风&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.luanxiang.org/&#34;&gt;&lt;strong&gt;余晟&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/yuankaining/&#34;&gt;元凯宁&lt;/a&gt; | &lt;a href=&#34;http://www.dbanotes.net/&#34;&gt;&lt;strong&gt;冯大辉(Fenng)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://liuxinyu95.googlepages.com/&#34;&gt;刘新宇&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/turingbook&#34;&gt;&lt;strong&gt;刘江@图灵&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.polyrandom.com/&#34;&gt;史晓明&lt;/a&gt; | &lt;a href=&#34;http://www.sinrain.cn/&#34;&gt;吴新雨&lt;/a&gt; | &lt;a href=&#34;http://blog.vckbase.com/bruceteen/&#34;&gt;周星星&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/yeka&#34;&gt;&lt;strong&gt;周筠@博文视点&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/myan&#34;&gt;&lt;strong&gt;孟岩&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://zhiqiang.org/blog/&#34;&gt;张志强|阅微堂&lt;/a&gt; | &lt;a href=&#34;http://cnzhangzhen.spaces.live.com/&#34;&gt;张振&lt;/a&gt; | &lt;a href=&#34;http://blog.youxu.info/&#34;&gt;&lt;strong&gt;徐宥|4G Spaces&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/kingofark&#34;&gt;方舟@博文视点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/zdg&#34;&gt;曾登高&lt;/a&gt; | &lt;a href=&#34;http://xiaolai.net/&#34;&gt;&lt;strong&gt;李笑来|Pure Pleasure&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://hi.baidu.com/yjpro&#34;&gt;杨军&lt;/a&gt; | &lt;a href=&#34;http://blog.solrex.cn/&#34;&gt;杨文博&lt;/a&gt; | &lt;a href=&#34;http://gigix.thoughtworkers.org/&#34;&gt;&lt;strong&gt;熊节&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://verypig.com/&#34;&gt;王信文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vgoogle.net/&#34;&gt;王康生&lt;/a&gt; | &lt;a href=&#34;http://iamsujie.com/&#34;&gt;&lt;strong&gt;苏杰@阿里巴巴&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.cnblogs.com/duguguiyu&#34;&gt;范怀宇&lt;/a&gt; | &lt;a href=&#34;http://www.royaloo.com/&#34;&gt;荣耀&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/longshanks&#34;&gt;莫华枫&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/jiangtao&#34;&gt;蒋涛&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/program_think&#34;&gt;&lt;strong&gt;编程随想&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/g9yuayon&#34;&gt;&lt;strong&gt;袁泳(g9)|负暄琐话&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/xushiweizh&#34;&gt;许式伟&lt;/a&gt; | &lt;a href=&#34;http://dongshengxie.spaces.live.com/&#34;&gt;谢东升&lt;/a&gt; | &lt;a href=&#34;http://guwendong.cn/&#34;&gt;&lt;strong&gt;谷文栋|Beyond Search&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://w3er.com/&#34;&gt;w3er&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yishan.cc/blogs/xin/default.aspx&#34;&gt;&lt;strong&gt;邹欣@MSRA&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/zhengyun_ustc&#34;&gt;&lt;strong&gt;郑昀&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/david_lv&#34;&gt;&lt;strong&gt;阿朱&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/childchen&#34;&gt;陈冀康@华章&lt;/a&gt; | &lt;a href=&#34;http://silwile.net/&#34;&gt;陈怀兴&lt;/a&gt; | &lt;a href=&#34;http://wesleybao.spaces.live.com/&#34;&gt;&lt;strong&gt;鲍志云&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.lanrenux.com/&#34;&gt;&lt;strong&gt;懒人有禅&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.xiqiao.info/&#34;&gt;&lt;strong&gt;西乔&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.devep.net/virushuo/&#34;&gt;&lt;strong&gt;霍炬&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://johnthu.spaces.live.com/&#34;&gt;胡江堂&lt;/a&gt; | &lt;a href=&#34;http://nidayede.cn/&#34;&gt;&lt;strong&gt;璎珞&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/futurelight&#34;&gt;霍泰稳&lt;/a&gt; | &lt;a href=&#34;http://blog.linjian.org/&#34;&gt;林健&lt;/a&gt; | &lt;a href=&#34;http://blog.nona.name/&#34;&gt;&lt;strong&gt;冰云&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.chedong.com/&#34;&gt;&lt;strong&gt;车东&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.zhangkf.com/&#34;&gt;张凯峰&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jshisan.yculblog.com/&#34;&gt;&lt;strong&gt;姬十三&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://smarttesting.spaces.live.com/&#34;&gt;&lt;strong&gt;史亮|SmartTesting&lt;/strong&gt;&lt;/a&gt; | &lt;strong&gt;&lt;a href=&#34;http://www.duniuniu.com/&#34;&gt;杜牛牛&lt;/a&gt; | &lt;a href=&#34;http://blog.jorywang.com/&#34;&gt;放牛者说&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.delphij.net/&#34;&gt;Delphij&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/fatalerror99&#34;&gt;fatalerror99&lt;/a&gt; | &lt;a href=&#34;http://home.wangjianshuo.com/mvm/&#34;&gt;flow with the life&lt;/a&gt; | &lt;a href=&#34;http://www.winbox.org/&#34;&gt;Glacier&lt;/a&gt; | &lt;a href=&#34;http://www.jimaxsoft.net/&#34;&gt;jimaxsoft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:lifesinger@%E6%B7%98%E5%AE%9DUED&#34;&gt;lifesinger@淘宝UED&lt;/a&gt; | &lt;a href=&#34;http://mr6.cc/&#34;&gt;Mr. 6&lt;/a&gt; | &lt;a href=&#34;http://realazy.org/blog/&#34;&gt;realazy&lt;/a&gt; | &lt;a href=&#34;http://robbin.javaeye.com/&#34;&gt;&lt;strong&gt;Robbin&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://epic.32o.cn/&#34;&gt;SpiritEpic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hi.baidu.com/tombkeeper&#34;&gt;TK&lt;/a&gt; | &lt;a href=&#34;http://wuyizi.spaces.live.com/&#34;&gt;wuyizi&lt;/a&gt; | &lt;a href=&#34;http://yelz.spaces.live.com/&#34;&gt;Yelz&lt;/a&gt; | &lt;a href=&#34;http://tintin.sfview.org/&#34;&gt;丁丁虫&lt;/a&gt; | &lt;a href=&#34;http://ifire.cn/&#34;&gt;付翀&lt;/a&gt; | &lt;a href=&#34;http://blog.sina.com.cn/lcx&#34;&gt;&lt;strong&gt;刘慈欣&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.changhai.org/&#34;&gt;&lt;strong&gt;卢昌海&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.luoyonghao.net/blogs/luoyonghao/&#34;&gt;&lt;strong&gt;老罗&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://immusoul.com/&#34;&gt;&lt;strong&gt;土摩托&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.wuxinan.net/&#34;&gt;吴欣安(atppp)&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/aimingoo/&#34;&gt;&lt;strong&gt;周爱民&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.hecaitou.net/&#34;&gt;和菜头&lt;/a&gt; |  | &lt;a href=&#34;http://www.watch-life.net/&#34;&gt;守望轩&lt;/a&gt; | &lt;a href=&#34;http://flowerfei.com/&#34;&gt;小花&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dahua.spaces.live.com/&#34;&gt;林达华&lt;/a&gt; | &lt;a href=&#34;http://www.puyuping.com/&#34;&gt;浦宇平&lt;/a&gt; | &lt;a href=&#34;http://uicom.net/blog/&#34;&gt;&lt;strong&gt;白鸦&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.csdn.net/hellothere/&#34;&gt;程化&lt;/a&gt; | &lt;a href=&#34;http://meditic.com/&#34;&gt;&lt;strong&gt;罗浩|Startup Game&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;&lt;strong&gt;阮一峰&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.charlesgao.com/&#34;&gt;高远&lt;/a&gt; | &lt;a href=&#34;http://fsbao.net/&#34;&gt;鲍盛&lt;/a&gt; | &lt;a href=&#34;http://xiaoxiao.com.cn/&#34;&gt;Xiaoxiao&lt;/a&gt; | &lt;a href=&#34;http://blog.pluskid.org/&#34;&gt;&lt;strong&gt;张驰原&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://blog.donews.com/keso&#34;&gt;&lt;strong&gt;Keso&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://ethinker.blog.china.alibaba.com/&#34;&gt;&lt;strong&gt;思践&lt;/strong&gt;&lt;/a&gt;|&lt;a href=&#34;http://tonybai.com/&#34;&gt;Tony Bai&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://zjykzk.github.io/post/about/</link>
      <pubDate>Tue, 02 Feb 2016 21:33:21 +0800</pubDate>
      <author>zhangkai.zju@gmail.com (zenk)</author>
      <guid>http://zjykzk.github.io/post/about/</guid>
      <description>&lt;p&gt;还在努力学习思考。。。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
